{
    "query_patterns": [
      {
        "id": "actor_first_name_search",
        "natural_language": [
          "Which actors have the first name 'Scarlett'?",
          "Show me actors named Scarlett",
          "Find all actors with first name Scarlett",
          "Actors whose first name is Scarlett"
        ],
        "sql": "SELECT * FROM actor WHERE first_name = 'Scarlett';",
        "description": "Find actors by their first name",
        "tables": ["actor"],
        "params": {
          "first_name": "Scarlett"
        }
      },
      {
        "id": "actor_last_name_search",
        "natural_language": [
          "Which actors have the last name 'Johansson'?",
          "Show me actors with surname Johansson",
          "Find all Johansson actors",
          "Actors with last name Johansson"
        ],
        "sql": "SELECT * FROM actor WHERE last_name LIKE 'Johansson';",
        "description": "Find actors by their last name",
        "tables": ["actor"],
        "params": {
          "last_name": "Johansson"
        }
      },
      {
        "id": "distinct_last_names_count",
        "natural_language": [
          "How many distinct actors last names are there?",
          "Count unique actor surnames",
          "Number of different last names in the actor table",
          "Total distinct actor last names"
        ],
        "sql": "SELECT COUNT(DISTINCT last_name) FROM actor;",
        "description": "Count the number of unique last names among actors",
        "tables": ["actor"],
        "params": {}
      },
      {
        "id": "non_repeated_last_names",
        "natural_language": [
          "Which last names are not repeated?",
          "Find actor surnames that appear only once",
          "Show last names that are unique",
          "Actor last names with only one occurrence"
        ],
        "sql": "SELECT last_name FROM actor GROUP BY last_name HAVING COUNT(*) = 1;",
        "description": "Find last names that appear only once in the actor table",
        "tables": ["actor"],
        "params": {}
      },
      {
        "id": "repeated_last_names",
        "natural_language": [
          "Which last names appear more than once?",
          "Find actor surnames that are repeated",
          "Show last names used by multiple actors",
          "Last names with multiple occurrences"
        ],
        "sql": "SELECT last_name FROM actor GROUP BY last_name HAVING COUNT(*) > 1;",
        "description": "Find last names that appear multiple times in the actor table",
        "tables": ["actor"],
        "params": {}
      },
      {
        "id": "actor_most_films",
        "natural_language": [
          "Which actor has appeared in the most films?",
          "Find the actor with the highest number of movies",
          "Who is the actor that stars in the most films?",
          "Actor with the most film appearances"
        ],
        "sql": "SELECT actor.actor_id, actor.first_name, actor.last_name, COUNT(actor_id) AS film_count FROM actor JOIN film_actor USING (actor_id) GROUP BY actor_id ORDER BY film_count DESC LIMIT 1;",
        "description": "Find the actor who has appeared in the most films",
        "tables": ["actor", "film_actor"],
        "params": {}
      },
      {
        "id": "film_available_at_store",
        "natural_language": [
          "Is 'Academy Dinosaur' available for rent from Store 1?",
          "Can I rent Academy Dinosaur from store 1?",
          "Check if Academy Dinosaur is in stock at store 1",
          "Availability of Academy Dinosaur at store 1"
        ],
        "sql": "SELECT inventory.inventory_id FROM inventory JOIN store USING (store_id) JOIN film USING (film_id) WHERE film.title = 'Academy Dinosaur' AND store.store_id = 1 AND NOT EXISTS (SELECT * FROM rental WHERE rental.inventory_id = inventory.inventory_id AND rental.return_date IS NULL);",
        "description": "Check if a specific film is available for rent at a specific store",
        "tables": ["inventory", "store", "film", "rental"],
        "params": {
          "title": "Academy Dinosaur",
          "store_id": 1
        }
      },
      {
        "id": "insert_rental",
        "natural_language": [
          "Insert a record to represent Mary Smith renting 'Academy Dinosaur' from Mike Hillyer at Store 1 today.",
          "Record a new rental of Academy Dinosaur by Mary Smith",
          "Add a rental record for Mary Smith checking out Academy Dinosaur",
          "Create a rental entry for Mary Smith borrowing Academy Dinosaur today"
        ],
        "sql": "INSERT INTO rental (rental_date, inventory_id, customer_id, staff_id) VALUES (NOW(), 1, 1, 1);",
        "description": "Insert a record for a new rental transaction",
        "tables": ["rental"],
        "params": {
          "inventory_id": 1,
          "customer_id": 1,
          "staff_id": 1
        }
      },
      {
        "id": "film_due_date",
        "natural_language": [
          "When is 'Academy Dinosaur' due?",
          "What's the return date for Academy Dinosaur?",
          "When should Academy Dinosaur be returned?",
          "Due date for the Academy Dinosaur rental"
        ],
        "sql": "SELECT rental_date, rental_date + INTERVAL (SELECT rental_duration FROM film WHERE film_id = 1) DAY AS due_date FROM rental WHERE rental_id = (SELECT rental_id FROM rental ORDER BY rental_id DESC LIMIT 1);",
        "description": "Calculate when a rented film is due to be returned",
        "tables": ["rental", "film"],
        "params": {
          "film_id": 1
        }
      },
      {
        "id": "average_film_length",
        "natural_language": [
          "What is that average length of all the films in the sakila DB?",
          "Average duration of movies in the database",
          "Mean length of all films",
          "What's the average running time of films?"
        ],
        "sql": "SELECT AVG(length) FROM film;",
        "description": "Calculate the average length of all films",
        "tables": ["film"],
        "params": {}
      },
      {
        "id": "average_length_by_category",
        "natural_language": [
          "What is the average length of films by category?",
          "Show average duration for each film category",
          "Mean running time of movies grouped by genre",
          "Average film length per category"
        ],
        "sql": "SELECT category.name, AVG(length) FROM film JOIN film_category USING (film_id) JOIN category USING (category_id) GROUP BY category.name ORDER BY AVG(length) DESC;",
        "description": "Calculate the average length of films for each category",
        "tables": ["film", "film_category", "category"],
        "params": {}
      },
      {
        "id": "long_film_categories",
        "natural_language": [
          "Which film categories are long?",
          "Find genres with above-average film length",
          "Categories with longer than average movies",
          "Which genres have films longer than the overall average?"
        ],
        "sql": "SELECT category.name, AVG(length) FROM film JOIN film_category USING (film_id) JOIN category USING (category_id) GROUP BY category.name HAVING AVG(length) > (SELECT AVG(length) FROM film) ORDER BY AVG(length) DESC;",
        "description": "Find categories where the average film length is greater than the overall average",
        "tables": ["film", "film_category", "category"],
        "params": {}
      },
      {
        "id": "empty_join_explanation",
        "natural_language": [
          "Why does this query return the empty set? SELECT * FROM film NATURAL JOIN inventory;",
          "Explain why film NATURAL JOIN inventory returns nothing",
          "Why is the result empty when doing a natural join of film and inventory?",
          "No results from film NATURAL JOIN inventory - why?"
        ],
        "sql": "SELECT * FROM film NATURAL JOIN inventory;",
        "description": "Demonstrate why a natural join between film and inventory returns no results",
        "tables": ["film", "inventory"],
        "params": {},
        "explanation": "This returns an empty set because film and inventory don't have any column names in common. The film_id column in both tables has the same meaning but NATURAL JOIN requires identical column names. Use JOIN...USING(film_id) instead."
      }
    ],
    "meta": {
      "database": "sakila",
      "version": "1.0",
      "created": "2025-04-02",
      "description": "Training data for NLP to SQL conversion for the Sakila DVD rental database"
    }
  }