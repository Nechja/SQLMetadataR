{
  "timestamp": "2025-04-02T18:27:29.293185",
  "database_name": "dvd",
  "total_queries": 253,
  "successful_queries": 0,
  "exact_matches": 0,
  "semantic_matches": 0,
  "result_matches": 0,
  "failed_queries": 253,
  "error_categories": {
    "syntax": 253
  },
  "query_comparisons": [
    {
      "natural_language": "Select all data from actor",
      "expected_query": "SELECT * FROM actor LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM actor LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "last_name": "GUINESS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 2,
            "first_name": "NICK",
            "last_name": "WAHLBERG",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 3,
            "first_name": "ED",
            "last_name": "CHASE",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 4,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 5,
            "first_name": "JOHNNY",
            "last_name": "LOLLOBRIGIDA",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 6,
            "first_name": "BETTE",
            "last_name": "NICHOLSON",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 7,
            "first_name": "GRACE",
            "last_name": "MOSTEL",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 8,
            "first_name": "MATTHEW",
            "last_name": "JOHANSSON",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 9,
            "first_name": "JOE",
            "last_name": "SWANK",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 10,
            "first_name": "CHRISTIAN",
            "last_name": "GABLE",
            "last_update": "2020-12-23 07:12:29"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter actor by actor_id",
      "expected_query": "SELECT * FROM actor WHERE actor_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM actor WHERE actor_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "last_name": "GUINESS",
            "last_update": "2020-12-23 07:12:29"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH actor USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order actor by actor_id",
      "expected_query": "SELECT * FROM actor ORDER BY actor_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM actor ORDER BY actor_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 200,
            "first_name": "THORA",
            "last_name": "TEMPLE",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 199,
            "first_name": "JULIA",
            "last_name": "FAWCETT",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 198,
            "first_name": "MARY",
            "last_name": "KEITEL",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 197,
            "first_name": "REESE",
            "last_name": "WEST",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 196,
            "first_name": "BELA",
            "last_name": "WALKEN",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 195,
            "first_name": "JAYNE",
            "last_name": "SILVERSTONE",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 194,
            "first_name": "MERYL",
            "last_name": "ALLEN",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 193,
            "first_name": "BURT",
            "last_name": "TEMPLE",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 192,
            "first_name": "JOHN",
            "last_name": "SUVARI",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "actor_id": 191,
            "first_name": "GREGORY",
            "last_name": "GOODING",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN actor USING INDEX sqlite_autoindex_actor_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from address",
      "expected_query": "SELECT * FROM address LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM address LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN address'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter address by address_id",
      "expected_query": "SELECT * FROM address WHERE address_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM address WHERE address_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH address USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order address by address_id",
      "expected_query": "SELECT * FROM address ORDER BY address_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM address ORDER BY address_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 605,
            "address": "1325 Fukuyama Street",
            "address2": null,
            "district": " ",
            "city_id": 537,
            "postal_code": "27107",
            "phone": " ",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "address_id": 604,
            "address": "1331 Usak Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 296,
            "postal_code": "61960",
            "phone": " ",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "address_id": 603,
            "address": "1103 Quilmes Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 503,
            "postal_code": "52137",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 602,
            "address": "1101 Bucuresti Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 401,
            "postal_code": "97661",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 601,
            "address": "844 Bucuresti Place",
            "address2": null,
            "district": " ",
            "city_id": 242,
            "postal_code": "36603",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 600,
            "address": "1837 Kaduna Parkway",
            "address2": null,
            "district": " ",
            "city_id": 241,
            "postal_code": "82580",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 599,
            "address": "1895 Zhezqazghan Drive",
            "address2": null,
            "district": " ",
            "city_id": 177,
            "postal_code": "36693",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 598,
            "address": "42 Fontana Avenue",
            "address2": null,
            "district": " ",
            "city_id": 512,
            "postal_code": "14684",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 597,
            "address": "32 Liaocheng Way",
            "address2": null,
            "district": " ",
            "city_id": 248,
            "postal_code": "1944",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          },
          {
            "address_id": 596,
            "address": "1759 Niznekamsk Avenue",
            "address2": null,
            "district": " ",
            "city_id": 14,
            "postal_code": "39414",
            "phone": " ",
            "last_update": "2020-12-23 07:12:28"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN address USING INDEX sqlite_autoindex_address_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from category",
      "expected_query": "SELECT * FROM category LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM category LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "category_id": 1,
            "name": "Action",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 2,
            "name": "Animation",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 3,
            "name": "Children",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 4,
            "name": "Classics",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 5,
            "name": "Comedy",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 6,
            "name": "Documentary",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 7,
            "name": "Drama",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 8,
            "name": "Family",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 9,
            "name": "Foreign",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 10,
            "name": "Games",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN category'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter category by category_id",
      "expected_query": "SELECT * FROM category WHERE category_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM category WHERE category_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "category_id": 1,
            "name": "Action",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH category USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order category by category_id",
      "expected_query": "SELECT * FROM category ORDER BY category_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM category ORDER BY category_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "category_id": 16,
            "name": "Travel",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 15,
            "name": "Sports",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 14,
            "name": "Sci-Fi",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 13,
            "name": "New",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 12,
            "name": "Music",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 11,
            "name": "Horror",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 10,
            "name": "Games",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 9,
            "name": "Foreign",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 8,
            "name": "Family",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 7,
            "name": "Drama",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN category USING INDEX sqlite_autoindex_category_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from city",
      "expected_query": "SELECT * FROM city LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM city LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 2,
            "city": "Abha",
            "country_id": 82,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 3,
            "city": "Abu Dhabi",
            "country_id": 101,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 4,
            "city": "Acua",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 5,
            "city": "Adana",
            "country_id": 97,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 6,
            "city": "Addis Abeba",
            "country_id": 31,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 7,
            "city": "Aden",
            "country_id": 107,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 8,
            "city": "Adoni",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 9,
            "city": "Ahmadnagar",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 10,
            "city": "Akishima",
            "country_id": 50,
            "last_update": "2020-12-23 07:12:14"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN city'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter city by city_id",
      "expected_query": "SELECT * FROM city WHERE city_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM city WHERE city_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH city USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order city by city_id",
      "expected_query": "SELECT * FROM city ORDER BY city_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM city ORDER BY city_id DESC LIMIT 10;",
        "execution_time_ms": 0.99945068359375,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 600,
            "city": "Ziguinchor",
            "country_id": 83,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 599,
            "city": "Zhoushan",
            "country_id": 23,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 598,
            "city": "Zhezqazghan",
            "country_id": 51,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 597,
            "city": "Zeleznogorsk",
            "country_id": 80,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 596,
            "city": "Zaria",
            "country_id": 69,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 595,
            "city": "Zapopan",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 594,
            "city": "Zaoyang",
            "country_id": 23,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 593,
            "city": "Zanzibar",
            "country_id": 93,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 592,
            "city": "Zalantun",
            "country_id": 23,
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "city_id": 591,
            "city": "Yuzhou",
            "country_id": 23,
            "last_update": "2020-12-23 07:12:21"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN city USING INDEX sqlite_autoindex_city_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from country",
      "expected_query": "SELECT * FROM country LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM country LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "country_id": 1,
            "country": "Afghanistan",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 2,
            "country": "Algeria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 3,
            "country": "American Samoa",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 4,
            "country": "Angola",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 5,
            "country": "Anguilla",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 6,
            "country": "Argentina",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 7,
            "country": "Armenia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 8,
            "country": "Australia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 9,
            "country": "Austria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 10,
            "country": "Azerbaijan",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN country'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter country by country_id",
      "expected_query": "SELECT * FROM country WHERE country_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM country WHERE country_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "country_id": 1,
            "country": "Afghanistan",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH country USING INDEX sqlite_autoindex_country_1 (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order country by country_id",
      "expected_query": "SELECT * FROM country ORDER BY country_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM country ORDER BY country_id DESC LIMIT 10;",
        "execution_time_ms": 1.001119613647461,
        "row_count": 10,
        "column_names": [
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "country_id": 109,
            "country": "Zambia",
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "country_id": 108,
            "country": "Yugoslavia",
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "country_id": 107,
            "country": "Yemen",
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "country_id": 106,
            "country": "Virgin Islands, U.S.",
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "country_id": 105,
            "country": "Vietnam",
            "last_update": "2020-12-23 07:12:13"
          },
          {
            "country_id": 104,
            "country": "Venezuela",
            "last_update": "2020-12-23 07:12:13"
          },
          {
            "country_id": 103,
            "country": "United States",
            "last_update": "2020-12-23 07:12:13"
          },
          {
            "country_id": 102,
            "country": "United Kingdom",
            "last_update": "2020-12-23 07:12:13"
          },
          {
            "country_id": 101,
            "country": "United Arab Emirates",
            "last_update": "2020-12-23 07:12:13"
          },
          {
            "country_id": 100,
            "country": "Ukraine",
            "last_update": "2020-12-23 07:12:13"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN country USING INDEX sqlite_autoindex_country_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from customer",
      "expected_query": "SELECT * FROM customer LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM customer LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN customer'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter customer by customer_id",
      "expected_query": "SELECT * FROM customer WHERE customer_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM customer WHERE customer_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH customer USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order customer by customer_id",
      "expected_query": "SELECT * FROM customer ORDER BY customer_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM customer ORDER BY customer_id DESC LIMIT 10;",
        "execution_time_ms": 0.9989738464355469,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 599,
            "store_id": 2,
            "first_name": "AUSTIN",
            "last_name": "CINTRON",
            "email": "AUSTIN.CINTRON@sakilacustomer.org",
            "address_id": 605,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "customer_id": 598,
            "store_id": 1,
            "first_name": "WADE",
            "last_name": "DELVALLE",
            "email": "WADE.DELVALLE@sakilacustomer.org",
            "address_id": 604,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "customer_id": 597,
            "store_id": 1,
            "first_name": "FREDDIE",
            "last_name": "DUGGAN",
            "email": "FREDDIE.DUGGAN@sakilacustomer.org",
            "address_id": 603,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "customer_id": 596,
            "store_id": 1,
            "first_name": "ENRIQUE",
            "last_name": "FORSYTHE",
            "email": "ENRIQUE.FORSYTHE@sakilacustomer.org",
            "address_id": 602,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "customer_id": 595,
            "store_id": 1,
            "first_name": "TERRENCE",
            "last_name": "GUNDERSON",
            "email": "TERRENCE.GUNDERSON@sakilacustomer.org",
            "address_id": 601,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "customer_id": 594,
            "store_id": 1,
            "first_name": "EDUARDO",
            "last_name": "HIATT",
            "email": "EDUARDO.HIATT@sakilacustomer.org",
            "address_id": 600,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:19"
          },
          {
            "customer_id": 593,
            "store_id": 2,
            "first_name": "RENE",
            "last_name": "MCALISTER",
            "email": "RENE.MCALISTER@sakilacustomer.org",
            "address_id": 599,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:19"
          },
          {
            "customer_id": 592,
            "store_id": 1,
            "first_name": "TERRANCE",
            "last_name": "ROUSH",
            "email": "TERRANCE.ROUSH@sakilacustomer.org",
            "address_id": 598,
            "active": "0",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:19"
          },
          {
            "customer_id": 591,
            "store_id": 1,
            "first_name": "KENT",
            "last_name": "ARSENAULT",
            "email": "KENT.ARSENAULT@sakilacustomer.org",
            "address_id": 597,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:19"
          },
          {
            "customer_id": 590,
            "store_id": 2,
            "first_name": "SETH",
            "last_name": "HANNON",
            "email": "SETH.HANNON@sakilacustomer.org",
            "address_id": 596,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000",
            "last_update": "2020-12-23 07:15:19"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN customer USING INDEX sqlite_autoindex_customer_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from film",
      "expected_query": "SELECT * FROM film LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter film by film_id",
      "expected_query": "SELECT * FROM film WHERE film_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film WHERE film_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH film USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order film by film_id",
      "expected_query": "SELECT * FROM film ORDER BY film_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film ORDER BY film_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1000,
            "title": "ZORRO ARK",
            "description": "A Intrepid Panorama of a Mad Scientist And a Boy who must Redeem a Boy in A Monastery",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 999,
            "title": "ZOOLANDER FICTION",
            "description": "A Fateful Reflection of a Waitress And a Boat who must Discover a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 101,
            "replacement_cost": 28.99,
            "rating": "R",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 998,
            "title": "ZHIVAGO CORE",
            "description": "A Fateful Yarn of a Composer And a Man who must Face a Boy in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 105,
            "replacement_cost": 10.99,
            "rating": "NC-17",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 997,
            "title": "YOUTH KICK",
            "description": "A Touching Drama of a Teacher And a Cat who must Challenge a Technical Writer in A U-Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 0.99,
            "length": 179,
            "replacement_cost": 14.99,
            "rating": "NC-17",
            "special_features": "Trailers,Behind the Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 996,
            "title": "YOUNG LANGUAGE",
            "description": "A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 183,
            "replacement_cost": 9.99,
            "rating": "G",
            "special_features": "Trailers,Behind the Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 995,
            "title": "YENTL IDAHO",
            "description": "A Amazing Display of a Robot And a Astronaut who must Fight a Womanizer in Berlin",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 4.99,
            "length": 86,
            "replacement_cost": 11.99,
            "rating": "R",
            "special_features": "Trailers,Commentaries,Deleted Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 994,
            "title": "WYOMING STORM",
            "description": "A Awe-Inspiring Panorama of a Robot And a Boat who must Overcome a Feminist in A U-Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 100,
            "replacement_cost": 29.99,
            "rating": "PG-13",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 993,
            "title": "WRONG BEHAVIOR",
            "description": "A Emotional Saga of a Crocodile And a Sumo Wrestler who must Discover a Mad Cow in New Orleans",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 178,
            "replacement_cost": 10.99,
            "rating": "PG-13",
            "special_features": "Trailers,Behind the Scenes",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 992,
            "title": "WRATH MILE",
            "description": "A Intrepid Reflection of a Technical Writer And a Hunter who must Defeat a Sumo Wrestler in A Monastery",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 0.99,
            "length": 176,
            "replacement_cost": 17.99,
            "rating": "NC-17",
            "special_features": "Trailers,Commentaries",
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "film_id": 991,
            "title": "WORST BANGER",
            "description": "A Thrilling Drama of a Madman And a Dentist who must Conquer a Boy in The Outback",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 2.99,
            "length": 185,
            "replacement_cost": 26.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:45"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN film USING INDEX sqlite_autoindex_film_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from film_actor",
      "expected_query": "SELECT * FROM film_actor LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_actor LIMIT 10;",
        "execution_time_ms": 1.0004043579101562,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter film_actor by actor_id",
      "expected_query": "SELECT * FROM film_actor WHERE actor_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_actor WHERE actor_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH film_actor USING INDEX idx_fk_film_actor_actor (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order film_actor by actor_id",
      "expected_query": "SELECT * FROM film_actor ORDER BY actor_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_actor ORDER BY actor_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 200,
            "film_id": 993,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 958,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 945,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 912,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 879,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 714,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 544,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 538,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 537,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "actor_id": 200,
            "film_id": 474,
            "last_update": "2020-12-23 07:14:58"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_actor USING INDEX idx_fk_film_actor_actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from film_category",
      "expected_query": "SELECT * FROM film_category LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_category LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 2,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 3,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 4,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 5,
            "category_id": 8,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 6,
            "category_id": 9,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 7,
            "category_id": 5,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 8,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 9,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58"
          },
          {
            "film_id": 10,
            "category_id": 15,
            "last_update": "2020-12-23 07:14:58"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_category'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter film_category by film_id",
      "expected_query": "SELECT * FROM film_category WHERE film_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_category WHERE film_id = 1 LIMIT 10;",
        "execution_time_ms": 0.9996891021728516,
        "row_count": 1,
        "column_names": [
          "film_id",
          "category_id",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH film_category USING INDEX idx_fk_film_category_film (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order film_category by film_id",
      "expected_query": "SELECT * FROM film_category ORDER BY film_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_category ORDER BY film_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1000,
            "category_id": 5,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 999,
            "category_id": 3,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 998,
            "category_id": 11,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 997,
            "category_id": 12,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 996,
            "category_id": 6,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 995,
            "category_id": 11,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 994,
            "category_id": 13,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 993,
            "category_id": 3,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 992,
            "category_id": 6,
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "film_id": 991,
            "category_id": 1,
            "last_update": "2020-12-23 07:15:11"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_category USING INDEX idx_fk_film_category_film'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from film_text",
      "expected_query": "SELECT * FROM film_text LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_text LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_text'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order film_text by film_id",
      "expected_query": "SELECT * FROM film_text ORDER BY film_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM film_text ORDER BY film_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_text USING INDEX sqlite_autoindex_film_text_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from inventory",
      "expected_query": "SELECT * FROM inventory LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM inventory LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN inventory'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter inventory by inventory_id",
      "expected_query": "SELECT * FROM inventory WHERE inventory_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM inventory WHERE inventory_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH inventory USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order inventory by inventory_id",
      "expected_query": "SELECT * FROM inventory ORDER BY inventory_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM inventory ORDER BY inventory_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 4581,
            "film_id": 1000,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4580,
            "film_id": 1000,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4579,
            "film_id": 1000,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4578,
            "film_id": 1000,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4577,
            "film_id": 1000,
            "store_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4576,
            "film_id": 1000,
            "store_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4575,
            "film_id": 1000,
            "store_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4574,
            "film_id": 1000,
            "store_id": 1,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4573,
            "film_id": 999,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          },
          {
            "inventory_id": 4572,
            "film_id": 999,
            "store_id": 2,
            "last_update": "2020-12-23 07:13:43"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN inventory USING INDEX sqlite_autoindex_inventory_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from language",
      "expected_query": "SELECT * FROM language LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM language LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 6,
        "column_names": [
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "language_id": 1,
            "name": "English",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 2,
            "name": "Italian",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 3,
            "name": "Japanese",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 4,
            "name": "Mandarin",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 5,
            "name": "French",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 6,
            "name": "German",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN language'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter language by language_id",
      "expected_query": "SELECT * FROM language WHERE language_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM language WHERE language_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "language_id": 1,
            "name": "English",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH language USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order language by language_id",
      "expected_query": "SELECT * FROM language ORDER BY language_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM language ORDER BY language_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 6,
        "column_names": [
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "language_id": 6,
            "name": "German",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 5,
            "name": "French",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 4,
            "name": "Mandarin",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 3,
            "name": "Japanese",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 2,
            "name": "Italian",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "language_id": 1,
            "name": "English",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN language USING INDEX sqlite_autoindex_language_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from payment",
      "expected_query": "SELECT * FROM payment LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM payment LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN payment'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter payment by payment_id",
      "expected_query": "SELECT * FROM payment WHERE payment_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM payment WHERE payment_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH payment USING INDEX sqlite_autoindex_payment_1 (payment_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order payment by payment_id",
      "expected_query": "SELECT * FROM payment ORDER BY payment_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM payment ORDER BY payment_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 16049,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 15725,
            "amount": 2.99,
            "payment_date": "2005-08-23 11:25:00.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16048,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 15719,
            "amount": 2.99,
            "payment_date": "2005-08-23 11:08:46.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16047,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 15590,
            "amount": 8.99,
            "payment_date": "2005-08-23 06:09:44.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16046,
            "customer_id": 599,
            "staff_id": 1,
            "rental_id": 14719,
            "amount": 1.99,
            "payment_date": "2005-08-21 21:41:57.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16045,
            "customer_id": 599,
            "staff_id": 1,
            "rental_id": 14599,
            "amount": 4.99,
            "payment_date": "2005-08-21 17:43:42.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16044,
            "customer_id": 599,
            "staff_id": 1,
            "rental_id": 14233,
            "amount": 1.99,
            "payment_date": "2005-08-21 05:07:08.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16043,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 11522,
            "amount": 3.99,
            "payment_date": "2005-08-17 00:05:05.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16042,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 9679,
            "amount": 2.99,
            "payment_date": "2005-07-31 06:41:19.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16041,
            "customer_id": 599,
            "staff_id": 2,
            "rental_id": 9630,
            "amount": 2.99,
            "payment_date": "2005-07-31 04:57:07.000",
            "last_update": "2020-12-23 07:22:55"
          },
          {
            "payment_id": 16040,
            "customer_id": 599,
            "staff_id": 1,
            "rental_id": 8965,
            "amount": 6.99,
            "payment_date": "2005-07-30 03:52:37.000",
            "last_update": "2020-12-23 07:22:55"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN payment USING INDEX sqlite_autoindex_payment_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from rental",
      "expected_query": "SELECT * FROM rental LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM rental LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN rental'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter rental by rental_id",
      "expected_query": "SELECT * FROM rental WHERE rental_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM rental WHERE rental_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH rental USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order rental by rental_id",
      "expected_query": "SELECT * FROM rental ORDER BY rental_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM rental ORDER BY rental_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 16049,
            "rental_date": "2005-08-23 22:50:12.000",
            "inventory_id": 2666,
            "customer_id": 393,
            "return_date": "2005-08-30 01:01:12.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16048,
            "rental_date": "2005-08-23 22:43:07.000",
            "inventory_id": 2019,
            "customer_id": 103,
            "return_date": "2005-08-31 21:33:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16047,
            "rental_date": "2005-08-23 22:42:48.000",
            "inventory_id": 2088,
            "customer_id": 114,
            "return_date": "2005-08-25 02:48:48.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16046,
            "rental_date": "2005-08-23 22:26:47.000",
            "inventory_id": 4364,
            "customer_id": 74,
            "return_date": "2005-08-27 18:02:47.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16045,
            "rental_date": "2005-08-23 22:25:26.000",
            "inventory_id": 772,
            "customer_id": 14,
            "return_date": "2005-08-25 23:54:26.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16044,
            "rental_date": "2005-08-23 22:24:39.000",
            "inventory_id": 1312,
            "customer_id": 468,
            "return_date": "2005-08-25 04:08:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16043,
            "rental_date": "2005-08-23 22:21:03.000",
            "inventory_id": 3869,
            "customer_id": 526,
            "return_date": "2005-08-31 03:09:03.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16042,
            "rental_date": "2005-08-23 22:20:40.000",
            "inventory_id": 629,
            "customer_id": 131,
            "return_date": "2005-08-24 17:54:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16041,
            "rental_date": "2005-08-23 22:20:26.000",
            "inventory_id": 4116,
            "customer_id": 121,
            "return_date": "2005-08-25 20:14:26.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          },
          {
            "rental_id": 16040,
            "rental_date": "2005-08-23 22:19:33.000",
            "inventory_id": 3524,
            "customer_id": 195,
            "return_date": "2005-09-02 02:19:33.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:19:10"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN rental USING INDEX sqlite_autoindex_rental_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from staff",
      "expected_query": "SELECT * FROM staff LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM staff LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN staff'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter staff by staff_id",
      "expected_query": "SELECT * FROM staff WHERE staff_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM staff WHERE staff_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH staff USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order staff by staff_id",
      "expected_query": "SELECT * FROM staff ORDER BY staff_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM staff ORDER BY staff_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN staff USING INDEX sqlite_autoindex_staff_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Select all data from store",
      "expected_query": "SELECT * FROM store LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM store LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN store'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Filter store by store_id",
      "expected_query": "SELECT * FROM store WHERE store_id = 1 LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM store WHERE store_id = 1 LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH store USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Order store by store_id",
      "expected_query": "SELECT * FROM store ORDER BY store_id DESC LIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT * FROM store ORDER BY store_id DESC LIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN store USING INDEX sqlite_autoindex_store_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "simple"
    },
    {
      "natural_language": "Join address with city",
      "expected_query": "SELECT t1.*, t2.*\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update",
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Lethbridge",
            "country_id": 20
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Woodridge",
            "country_id": 8
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Lethbridge",
            "country_id": 20
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Woodridge",
            "country_id": 8
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Sasebo",
            "country_id": 50
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "San Bernardino",
            "country_id": 103
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Athenai",
            "country_id": 39
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Myingyan",
            "country_id": 64
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Nantou",
            "country_id": 92
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Laredo",
            "country_id": 103
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join address with city and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id\nWHERE t1.city_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id\nWHERE t1.city_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update",
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Lethbridge",
            "country_id": 20
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Woodridge",
            "country_id": 8
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Lethbridge",
            "country_id": 20
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Woodridge",
            "country_id": 8
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Sasebo",
            "country_id": 50
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "San Bernardino",
            "country_id": 103
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Athenai",
            "country_id": 39
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Myingyan",
            "country_id": 64
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Nantou",
            "country_id": 92
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21",
            "city": "Laredo",
            "country_id": 103
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join city with country",
      "expected_query": "SELECT t1.*, t2.*\nFROM city t1\nJOIN country t2 ON t1.country_id = t2.country_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM city t1\nJOIN country t2 ON t1.country_id = t2.country_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update",
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14",
            "country": "Spain"
          },
          {
            "city_id": 2,
            "city": "Abha",
            "country_id": 82,
            "last_update": "2020-12-23 07:12:14",
            "country": "Saudi Arabia"
          },
          {
            "city_id": 3,
            "city": "Abu Dhabi",
            "country_id": 101,
            "last_update": "2020-12-23 07:12:14",
            "country": "United Arab Emirates"
          },
          {
            "city_id": 4,
            "city": "Acua",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:14",
            "country": "Mexico"
          },
          {
            "city_id": 5,
            "city": "Adana",
            "country_id": 97,
            "last_update": "2020-12-23 07:12:14",
            "country": "Turkey"
          },
          {
            "city_id": 6,
            "city": "Addis Abeba",
            "country_id": 31,
            "last_update": "2020-12-23 07:12:14",
            "country": "Ethiopia"
          },
          {
            "city_id": 7,
            "city": "Aden",
            "country_id": 107,
            "last_update": "2020-12-23 07:12:14",
            "country": "Yemen"
          },
          {
            "city_id": 8,
            "city": "Adoni",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14",
            "country": "India"
          },
          {
            "city_id": 9,
            "city": "Ahmadnagar",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14",
            "country": "India"
          },
          {
            "city_id": 10,
            "city": "Akishima",
            "country_id": 50,
            "last_update": "2020-12-23 07:12:14",
            "country": "Japan"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_country_1 (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join city with country and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM city t1\nJOIN country t2 ON t1.country_id = t2.country_id\nWHERE t1.country_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM city t1\nJOIN country t2 ON t1.country_id = t2.country_id\nWHERE t1.country_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update",
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14",
            "country": "Spain"
          },
          {
            "city_id": 2,
            "city": "Abha",
            "country_id": 82,
            "last_update": "2020-12-23 07:12:14",
            "country": "Saudi Arabia"
          },
          {
            "city_id": 3,
            "city": "Abu Dhabi",
            "country_id": 101,
            "last_update": "2020-12-23 07:12:14",
            "country": "United Arab Emirates"
          },
          {
            "city_id": 4,
            "city": "Acua",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:14",
            "country": "Mexico"
          },
          {
            "city_id": 5,
            "city": "Adana",
            "country_id": 97,
            "last_update": "2020-12-23 07:12:14",
            "country": "Turkey"
          },
          {
            "city_id": 6,
            "city": "Addis Abeba",
            "country_id": 31,
            "last_update": "2020-12-23 07:12:14",
            "country": "Ethiopia"
          },
          {
            "city_id": 7,
            "city": "Aden",
            "country_id": 107,
            "last_update": "2020-12-23 07:12:14",
            "country": "Yemen"
          },
          {
            "city_id": 8,
            "city": "Adoni",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14",
            "country": "India"
          },
          {
            "city_id": 9,
            "city": "Ahmadnagar",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14",
            "country": "India"
          },
          {
            "city_id": 10,
            "city": "Akishima",
            "country_id": 50,
            "last_update": "2020-12-23 07:12:14",
            "country": "Japan"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_country_1 (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join customer with address",
      "expected_query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
        "execution_time_ms": 0.5259513854980469,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " "
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " "
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " "
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " "
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " "
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " "
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "900 Santiago de Compostela Parkway",
            "address2": null,
            "district": " ",
            "city_id": 280,
            "postal_code": "93896",
            "phone": " "
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "478 Joliet Way",
            "address2": null,
            "district": " ",
            "city_id": 200,
            "postal_code": "77948",
            "phone": " "
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "613 Korolev Drive",
            "address2": null,
            "district": " ",
            "city_id": 329,
            "postal_code": "45844",
            "phone": " "
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1531 Sal Drive",
            "address2": null,
            "district": " ",
            "city_id": 162,
            "postal_code": "53628",
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join customer with address and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " "
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " "
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " "
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " "
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " "
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " "
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "900 Santiago de Compostela Parkway",
            "address2": null,
            "district": " ",
            "city_id": 280,
            "postal_code": "93896",
            "phone": " "
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "478 Joliet Way",
            "address2": null,
            "district": " ",
            "city_id": 200,
            "postal_code": "77948",
            "phone": " "
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "613 Korolev Drive",
            "address2": null,
            "district": " ",
            "city_id": 329,
            "postal_code": "45844",
            "phone": " "
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "address": "1531 Sal Drive",
            "address2": null,
            "district": " ",
            "city_id": 162,
            "postal_code": "53628",
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join customer with store",
      "expected_query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join customer with store and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.5297660827636719,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 2
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11",
            "manager_staff_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film with language",
      "expected_query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.original_language_id = t2.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.original_language_id = t2.language_id\nLIMIT 10;",
        "execution_time_ms": 0.5342960357666016,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update",
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film with language and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.original_language_id = t2.language_id\nWHERE t1.original_language_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.original_language_id = t2.language_id\nWHERE t1.original_language_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update",
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film with language",
      "expected_query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.language_id = t2.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.language_id = t2.language_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update",
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film with language and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.language_id = t2.language_id\nWHERE t1.language_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film t1\nJOIN language t2 ON t1.language_id = t2.language_id\nWHERE t1.language_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update",
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31",
            "name": "English"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_actor with film",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
        "execution_time_ms": 0.5233287811279297,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43",
            "title": "ANACONDA CONFESSIONS",
            "description": "A Lacklusture Display of a Dentist And a Dentist who must Fight a Girl in Australia",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 0.99,
            "length": 92,
            "replacement_cost": 9.99,
            "rating": "R",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43",
            "title": "ANGELS LIFE",
            "description": "A Thoughtful Display of a Woman And a Astronaut who must Battle a Robot in Berlin",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 74,
            "replacement_cost": 15.99,
            "rating": "G",
            "special_features": "Trailers"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43",
            "title": "BULWORTH COMMANDMENTS",
            "description": "A Amazing Display of a Mad Cow And a Pioneer who must Redeem a Sumo Wrestler in The Outback",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 2.99,
            "length": 61,
            "replacement_cost": 14.99,
            "rating": "G",
            "special_features": "Trailers"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43",
            "title": "CHEAPER CLYDE",
            "description": "A Emotional Character Study of a Pioneer And a Girl who must Discover a Dog in Ancient Japan",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 87,
            "replacement_cost": 23.99,
            "rating": "G",
            "special_features": "Trailers,Commentaries,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43",
            "title": "COLOR PHILADELPHIA",
            "description": "A Thoughtful Panorama of a Car And a Crocodile who must Sink a Monkey in The Sahara Desert",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 149,
            "replacement_cost": 19.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43",
            "title": "ELEPHANT TROJAN",
            "description": "A Beautiful Panorama of a Lumberjack And a Forensic Psychologist who must Overcome a Frisbee in A Baloon",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 4.99,
            "length": 126,
            "replacement_cost": 24.99,
            "rating": "PG-13",
            "special_features": "Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43",
            "title": "GLEAMING JAWBREAKER",
            "description": "A Amazing Display of a Composer And a Forensic Psychologist who must Discover a Car in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 89,
            "replacement_cost": 25.99,
            "rating": "NC-17",
            "special_features": "Trailers,Commentaries"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43",
            "title": "HUMAN GRAFFITI",
            "description": "A Beautiful Reflection of a Womanizer And a Sumo Wrestler who must Chase a Database Administrator in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 68,
            "replacement_cost": 22.99,
            "rating": "NC-17",
            "special_features": "Trailers,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43",
            "title": "KING EVOLUTION",
            "description": "A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 184,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes,Behind the Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_actor with film and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43",
            "title": "ANACONDA CONFESSIONS",
            "description": "A Lacklusture Display of a Dentist And a Dentist who must Fight a Girl in Australia",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 0.99,
            "length": 92,
            "replacement_cost": 9.99,
            "rating": "R",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43",
            "title": "ANGELS LIFE",
            "description": "A Thoughtful Display of a Woman And a Astronaut who must Battle a Robot in Berlin",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 74,
            "replacement_cost": 15.99,
            "rating": "G",
            "special_features": "Trailers"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43",
            "title": "BULWORTH COMMANDMENTS",
            "description": "A Amazing Display of a Mad Cow And a Pioneer who must Redeem a Sumo Wrestler in The Outback",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 2.99,
            "length": 61,
            "replacement_cost": 14.99,
            "rating": "G",
            "special_features": "Trailers"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43",
            "title": "CHEAPER CLYDE",
            "description": "A Emotional Character Study of a Pioneer And a Girl who must Discover a Dog in Ancient Japan",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 87,
            "replacement_cost": 23.99,
            "rating": "G",
            "special_features": "Trailers,Commentaries,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43",
            "title": "COLOR PHILADELPHIA",
            "description": "A Thoughtful Panorama of a Car And a Crocodile who must Sink a Monkey in The Sahara Desert",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 149,
            "replacement_cost": 19.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43",
            "title": "ELEPHANT TROJAN",
            "description": "A Beautiful Panorama of a Lumberjack And a Forensic Psychologist who must Overcome a Frisbee in A Baloon",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 4,
            "rental_rate": 4.99,
            "length": 126,
            "replacement_cost": 24.99,
            "rating": "PG-13",
            "special_features": "Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43",
            "title": "GLEAMING JAWBREAKER",
            "description": "A Amazing Display of a Composer And a Forensic Psychologist who must Discover a Car in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 89,
            "replacement_cost": 25.99,
            "rating": "NC-17",
            "special_features": "Trailers,Commentaries"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43",
            "title": "HUMAN GRAFFITI",
            "description": "A Beautiful Reflection of a Womanizer And a Sumo Wrestler who must Chase a Database Administrator in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 68,
            "replacement_cost": 22.99,
            "rating": "NC-17",
            "special_features": "Trailers,Behind the Scenes"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43",
            "title": "KING EVOLUTION",
            "description": "A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 184,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes,Behind the Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_actor with actor",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN actor t2 ON t1.actor_id = t2.actor_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN actor t2 ON t1.actor_id = t2.actor_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update",
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_actor with actor and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN actor t2 ON t1.actor_id = t2.actor_id\nWHERE t1.actor_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_actor t1\nJOIN actor t2 ON t1.actor_id = t2.actor_id\nWHERE t1.actor_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "last_update",
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "last_update": "2020-12-23 07:13:43",
            "first_name": "PENELOPE",
            "last_name": "GUINESS"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_category with category",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN category t2 ON t1.category_id = t2.category_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN category t2 ON t1.category_id = t2.category_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update",
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "name": "Documentary"
          },
          {
            "film_id": 2,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 3,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "name": "Documentary"
          },
          {
            "film_id": 4,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 5,
            "category_id": 8,
            "last_update": "2020-12-23 07:14:58",
            "name": "Family"
          },
          {
            "film_id": 6,
            "category_id": 9,
            "last_update": "2020-12-23 07:14:58",
            "name": "Foreign"
          },
          {
            "film_id": 7,
            "category_id": 5,
            "last_update": "2020-12-23 07:14:58",
            "name": "Comedy"
          },
          {
            "film_id": 8,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 9,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 10,
            "category_id": 15,
            "last_update": "2020-12-23 07:14:58",
            "name": "Sports"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_category with category and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN category t2 ON t1.category_id = t2.category_id\nWHERE t1.category_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN category t2 ON t1.category_id = t2.category_id\nWHERE t1.category_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.5869865417480469,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update",
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "name": "Documentary"
          },
          {
            "film_id": 2,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 3,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "name": "Documentary"
          },
          {
            "film_id": 4,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 5,
            "category_id": 8,
            "last_update": "2020-12-23 07:14:58",
            "name": "Family"
          },
          {
            "film_id": 6,
            "category_id": 9,
            "last_update": "2020-12-23 07:14:58",
            "name": "Foreign"
          },
          {
            "film_id": 7,
            "category_id": 5,
            "last_update": "2020-12-23 07:14:58",
            "name": "Comedy"
          },
          {
            "film_id": 8,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 9,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "name": "Horror"
          },
          {
            "film_id": 10,
            "category_id": 15,
            "last_update": "2020-12-23 07:14:58",
            "name": "Sports"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_category with film",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "film_id": 2,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 3,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 4,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes"
          },
          {
            "film_id": 5,
            "category_id": 8,
            "last_update": "2020-12-23 07:14:58",
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes"
          },
          {
            "film_id": 6,
            "category_id": 9,
            "last_update": "2020-12-23 07:14:58",
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes"
          },
          {
            "film_id": 7,
            "category_id": 5,
            "last_update": "2020-12-23 07:14:58",
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 8,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers"
          },
          {
            "film_id": 9,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 10,
            "category_id": 15,
            "last_update": "2020-12-23 07:14:58",
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join film_category with film and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "film_id": 2,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 3,
            "category_id": 6,
            "last_update": "2020-12-23 07:14:58",
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 4,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes"
          },
          {
            "film_id": 5,
            "category_id": 8,
            "last_update": "2020-12-23 07:14:58",
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes"
          },
          {
            "film_id": 6,
            "category_id": 9,
            "last_update": "2020-12-23 07:14:58",
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes"
          },
          {
            "film_id": 7,
            "category_id": 5,
            "last_update": "2020-12-23 07:14:58",
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 8,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers"
          },
          {
            "film_id": 9,
            "category_id": 11,
            "last_update": "2020-12-23 07:14:58",
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "film_id": 10,
            "category_id": 15,
            "last_update": "2020-12-23 07:14:58",
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join inventory with film",
      "expected_query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.5238056182861328,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join inventory with film and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id\nWHERE t1.film_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update",
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join inventory with store",
      "expected_query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join inventory with store and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.5223751068115234,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 1,
            "address_id": 1
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45",
            "manager_staff_id": 2,
            "address_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with staff",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with staff and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nWHERE t1.staff_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nWHERE t1.staff_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with customer",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with customer and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nWHERE t1.customer_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nWHERE t1.customer_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with rental",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.5152225494384766,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-05-25 11:30:37.000",
            "inventory_id": 3021,
            "return_date": "2005-06-03 12:00:37.000"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-05-28 10:35:23.000",
            "inventory_id": 4020,
            "return_date": "2005-06-03 06:32:23.000"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 00:54:12.000",
            "inventory_id": 2785,
            "return_date": "2005-06-23 02:42:12.000"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 18:02:53.000",
            "inventory_id": 1021,
            "return_date": "2005-06-19 15:54:53.000"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 21:08:46.000",
            "inventory_id": 1407,
            "return_date": "2005-06-25 02:26:46.000"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-16 15:18:57.000",
            "inventory_id": 726,
            "return_date": "2005-06-17 21:05:57.000"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-18 08:41:48.000",
            "inventory_id": 197,
            "return_date": "2005-06-22 03:36:48.000"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-18 13:33:59.000",
            "inventory_id": 3497,
            "return_date": "2005-06-19 17:40:59.000"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-21 06:24:45.000",
            "inventory_id": 4566,
            "return_date": "2005-06-28 03:28:45.000"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-07-08 03:17:05.000",
            "inventory_id": 1443,
            "return_date": "2005-07-14 01:19:05.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join payment with rental and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id\nWHERE t1.rental_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id\nWHERE t1.rental_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "rental_id",
          "amount",
          "payment_date",
          "last_update",
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 76,
            "amount": 2.99,
            "payment_date": "2005-05-25 11:30:37.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-05-25 11:30:37.000",
            "inventory_id": 3021,
            "return_date": "2005-06-03 12:00:37.000"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 573,
            "amount": 0.99,
            "payment_date": "2005-05-28 10:35:23.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-05-28 10:35:23.000",
            "inventory_id": 4020,
            "return_date": "2005-06-03 06:32:23.000"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1185,
            "amount": 5.99,
            "payment_date": "2005-06-15 00:54:12.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 00:54:12.000",
            "inventory_id": 2785,
            "return_date": "2005-06-23 02:42:12.000"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1422,
            "amount": 0.99,
            "payment_date": "2005-06-15 18:02:53.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 18:02:53.000",
            "inventory_id": 1021,
            "return_date": "2005-06-19 15:54:53.000"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 1476,
            "amount": 9.99,
            "payment_date": "2005-06-15 21:08:46.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-15 21:08:46.000",
            "inventory_id": 1407,
            "return_date": "2005-06-25 02:26:46.000"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 1725,
            "amount": 4.99,
            "payment_date": "2005-06-16 15:18:57.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-16 15:18:57.000",
            "inventory_id": 726,
            "return_date": "2005-06-17 21:05:57.000"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 2308,
            "amount": 4.99,
            "payment_date": "2005-06-18 08:41:48.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-18 08:41:48.000",
            "inventory_id": 197,
            "return_date": "2005-06-22 03:36:48.000"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 2363,
            "amount": 0.99,
            "payment_date": "2005-06-18 13:33:59.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-18 13:33:59.000",
            "inventory_id": 3497,
            "return_date": "2005-06-19 17:40:59.000"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "rental_id": 3284,
            "amount": 3.99,
            "payment_date": "2005-06-21 06:24:45.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-06-21 06:24:45.000",
            "inventory_id": 4566,
            "return_date": "2005-06-28 03:28:45.000"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "rental_id": 4526,
            "amount": 5.99,
            "payment_date": "2005-07-08 03:17:05.000",
            "last_update": "2020-12-23 07:19:10",
            "rental_date": "2005-07-08 03:17:05.000",
            "inventory_id": 1443,
            "return_date": "2005-07-14 01:19:05.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with customer",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "CHARLOTTE",
            "last_name": "HUNTER",
            "email": "CHARLOTTE.HUNTER@sakilacustomer.org",
            "address_id": 134,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "TOMMY",
            "last_name": "COLLAZO",
            "email": "TOMMY.COLLAZO@sakilacustomer.org",
            "address_id": 464,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "MANUEL",
            "last_name": "MURRELL",
            "email": "MANUEL.MURRELL@sakilacustomer.org",
            "address_id": 413,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "ANDREW",
            "last_name": "PURDY",
            "email": "ANDREW.PURDY@sakilacustomer.org",
            "address_id": 338,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "DELORES",
            "last_name": "HANSEN",
            "email": "DELORES.HANSEN@sakilacustomer.org",
            "address_id": 226,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "NELSON",
            "last_name": "CHRISTENSON",
            "email": "NELSON.CHRISTENSON@sakilacustomer.org",
            "address_id": 555,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "CASSANDRA",
            "last_name": "WALTERS",
            "email": "CASSANDRA.WALTERS@sakilacustomer.org",
            "address_id": 274,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "MINNIE",
            "last_name": "ROMERO",
            "email": "MINNIE.ROMERO@sakilacustomer.org",
            "address_id": 243,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "ELLEN",
            "last_name": "SIMPSON",
            "email": "ELLEN.SIMPSON@sakilacustomer.org",
            "address_id": 130,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "DANNY",
            "last_name": "ISOM",
            "email": "DANNY.ISOM@sakilacustomer.org",
            "address_id": 404,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with customer and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nWHERE t1.customer_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id\nWHERE t1.customer_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "CHARLOTTE",
            "last_name": "HUNTER",
            "email": "CHARLOTTE.HUNTER@sakilacustomer.org",
            "address_id": 134,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "TOMMY",
            "last_name": "COLLAZO",
            "email": "TOMMY.COLLAZO@sakilacustomer.org",
            "address_id": 464,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "MANUEL",
            "last_name": "MURRELL",
            "email": "MANUEL.MURRELL@sakilacustomer.org",
            "address_id": 413,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "ANDREW",
            "last_name": "PURDY",
            "email": "ANDREW.PURDY@sakilacustomer.org",
            "address_id": 338,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "DELORES",
            "last_name": "HANSEN",
            "email": "DELORES.HANSEN@sakilacustomer.org",
            "address_id": 226,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "NELSON",
            "last_name": "CHRISTENSON",
            "email": "NELSON.CHRISTENSON@sakilacustomer.org",
            "address_id": 555,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "CASSANDRA",
            "last_name": "WALTERS",
            "email": "CASSANDRA.WALTERS@sakilacustomer.org",
            "address_id": 274,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 2,
            "first_name": "MINNIE",
            "last_name": "ROMERO",
            "email": "MINNIE.ROMERO@sakilacustomer.org",
            "address_id": 243,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "ELLEN",
            "last_name": "SIMPSON",
            "email": "ELLEN.SIMPSON@sakilacustomer.org",
            "address_id": 130,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "store_id": 1,
            "first_name": "DANNY",
            "last_name": "ISOM",
            "email": "DANNY.ISOM@sakilacustomer.org",
            "address_id": 404,
            "active": "1",
            "create_date": "2006-02-14 22:04:37.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.5121231079101562,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with inventory",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 80,
            "store_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 333,
            "store_id": 2
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 373,
            "store_id": 2
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 535,
            "store_id": 1
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 450,
            "store_id": 2
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 613,
            "store_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 870,
            "store_id": 2
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 510,
            "store_id": 1
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 565,
            "store_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 396,
            "store_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with inventory and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id\nWHERE t1.inventory_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id\nWHERE t1.inventory_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 80,
            "store_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 333,
            "store_id": 2
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 373,
            "store_id": 2
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 535,
            "store_id": 1
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 450,
            "store_id": 2
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 613,
            "store_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 870,
            "store_id": 2
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 510,
            "store_id": 1
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 565,
            "store_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "film_id": 396,
            "store_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with staff",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join rental with staff and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nWHERE t1.staff_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id\nWHERE t1.staff_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 1.0037422180175781,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20",
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join staff with address",
      "expected_query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "address": "23 Workhaven Lane",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " "
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "address": "1411 Lillydale Drive",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join staff with address and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "address": "23 Workhaven Lane",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " "
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "address": "1411 Lillydale Drive",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join staff with store",
      "expected_query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "manager_staff_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join staff with store and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id\nWHERE t1.store_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 1.0001659393310547,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update",
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "manager_staff_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31",
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join store with address",
      "expected_query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31",
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " "
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31",
            "address": "28 MySQL Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join store with address and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id\nWHERE t1.address_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update",
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31",
            "address": "47 MySakila Drive",
            "address2": null,
            "district": " ",
            "city_id": 300,
            "postal_code": null,
            "phone": " "
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31",
            "address": "28 MySQL Boulevard",
            "address2": null,
            "district": " ",
            "city_id": 576,
            "postal_code": null,
            "phone": " "
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join store with staff",
      "expected_query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN staff t2 ON t1.manager_staff_id = t2.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN staff t2 ON t1.manager_staff_id = t2.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31",
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31",
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 5, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Join store with staff and filter results",
      "expected_query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN staff t2 ON t1.manager_staff_id = t2.staff_id\nWHERE t1.manager_staff_id IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.*, t2.*\nFROM store t1\nJOIN staff t2 ON t1.manager_staff_id = t2.staff_id\nWHERE t1.manager_staff_id IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update",
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31",
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31",
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for actor",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(actor_id) as average,\n    SUM(actor_id) as total,\n    MIN(actor_id) as minimum,\n    MAX(actor_id) as maximum\nFROM actor;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(actor_id) as average,\n    SUM(actor_id) as total,\n    MIN(actor_id) as minimum,\n    MAX(actor_id) as maximum\nFROM actor;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 200,
            "average": 100.5,
            "total": 20100,
            "minimum": 1,
            "maximum": 200
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN actor USING COVERING INDEX sqlite_autoindex_actor_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for address",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(address_id) as average,\n    SUM(address_id) as total,\n    MIN(address_id) as minimum,\n    MAX(address_id) as maximum\nFROM address;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(address_id) as average,\n    SUM(address_id) as total,\n    MIN(address_id) as minimum,\n    MAX(address_id) as maximum\nFROM address;",
        "execution_time_ms": 0.9984970092773438,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 603,
            "average": 302.71973466003317,
            "total": 182540,
            "minimum": 1,
            "maximum": 605
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN address USING COVERING INDEX sqlite_autoindex_address_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for city",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(city_id) as average,\n    SUM(city_id) as total,\n    MIN(city_id) as minimum,\n    MAX(city_id) as maximum\nFROM city;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(city_id) as average,\n    SUM(city_id) as total,\n    MIN(city_id) as minimum,\n    MAX(city_id) as maximum\nFROM city;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 600,
            "average": 300.5,
            "total": 180300,
            "minimum": 1,
            "maximum": 600
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN city USING COVERING INDEX sqlite_autoindex_city_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for customer",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(customer_id) as average,\n    SUM(customer_id) as total,\n    MIN(customer_id) as minimum,\n    MAX(customer_id) as maximum\nFROM customer;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(customer_id) as average,\n    SUM(customer_id) as total,\n    MIN(customer_id) as minimum,\n    MAX(customer_id) as maximum\nFROM customer;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 599,
            "average": 300.0,
            "total": 179700,
            "minimum": 1,
            "maximum": 599
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN customer USING COVERING INDEX sqlite_autoindex_customer_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for film",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(film_id) as average,\n    SUM(film_id) as total,\n    MIN(film_id) as minimum,\n    MAX(film_id) as maximum\nFROM film;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(film_id) as average,\n    SUM(film_id) as total,\n    MIN(film_id) as minimum,\n    MAX(film_id) as maximum\nFROM film;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 1000,
            "average": 500.5,
            "total": 500500,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film USING COVERING INDEX sqlite_autoindex_film_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for film_actor",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(actor_id) as average,\n    SUM(actor_id) as total,\n    MIN(actor_id) as minimum,\n    MAX(actor_id) as maximum\nFROM film_actor;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(actor_id) as average,\n    SUM(actor_id) as total,\n    MIN(actor_id) as minimum,\n    MAX(actor_id) as maximum\nFROM film_actor;",
        "execution_time_ms": 0.99945068359375,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 5462,
            "average": 100.95239838886854,
            "total": 551402,
            "minimum": 1,
            "maximum": 200
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_actor USING COVERING INDEX idx_fk_film_actor_actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for film_category",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(film_id) as average,\n    SUM(film_id) as total,\n    MIN(film_id) as minimum,\n    MAX(film_id) as maximum\nFROM film_category;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(film_id) as average,\n    SUM(film_id) as total,\n    MIN(film_id) as minimum,\n    MAX(film_id) as maximum\nFROM film_category;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 1000,
            "average": 500.5,
            "total": 500500,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN film_category USING COVERING INDEX idx_fk_film_category_film'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for inventory",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(inventory_id) as average,\n    SUM(inventory_id) as total,\n    MIN(inventory_id) as minimum,\n    MAX(inventory_id) as maximum\nFROM inventory;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(inventory_id) as average,\n    SUM(inventory_id) as total,\n    MIN(inventory_id) as minimum,\n    MAX(inventory_id) as maximum\nFROM inventory;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 4581,
            "average": 2291.0,
            "total": 10495071,
            "minimum": 1,
            "maximum": 4581
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN inventory USING COVERING INDEX sqlite_autoindex_inventory_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for payment",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(payment_id) as average,\n    SUM(payment_id) as total,\n    MIN(payment_id) as minimum,\n    MAX(payment_id) as maximum\nFROM payment;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(payment_id) as average,\n    SUM(payment_id) as total,\n    MIN(payment_id) as minimum,\n    MAX(payment_id) as maximum\nFROM payment;",
        "execution_time_ms": 0.9996891021728516,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 16049,
            "average": 8025.0,
            "total": 128793225,
            "minimum": 1,
            "maximum": 16049
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN payment USING COVERING INDEX sqlite_autoindex_payment_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for rental",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(rental_id) as average,\n    SUM(rental_id) as total,\n    MIN(rental_id) as minimum,\n    MAX(rental_id) as maximum\nFROM rental;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(rental_id) as average,\n    SUM(rental_id) as total,\n    MIN(rental_id) as minimum,\n    MAX(rental_id) as maximum\nFROM rental;",
        "execution_time_ms": 1.0013580322265625,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 16044,
            "average": 8025.371478434306,
            "total": 128759060,
            "minimum": 1,
            "maximum": 16049
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN rental USING COVERING INDEX sqlite_autoindex_rental_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for staff",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(address_id) as average,\n    SUM(address_id) as total,\n    MIN(address_id) as minimum,\n    MAX(address_id) as maximum\nFROM staff;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(address_id) as average,\n    SUM(address_id) as total,\n    MIN(address_id) as minimum,\n    MAX(address_id) as maximum\nFROM staff;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 2,
            "average": 3.5,
            "total": 7,
            "minimum": 3,
            "maximum": 4
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN staff USING COVERING INDEX idx_fk_staff_address_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Aggregate statistics for store",
      "expected_query": "SELECT \n    COUNT(*) as count,\n    AVG(store_id) as average,\n    SUM(store_id) as total,\n    MIN(store_id) as minimum,\n    MAX(store_id) as maximum\nFROM store;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT \n    COUNT(*) as count,\n    AVG(store_id) as average,\n    SUM(store_id) as total,\n    MIN(store_id) as minimum,\n    MAX(store_id) as maximum\nFROM store;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "count",
          "average",
          "total",
          "minimum",
          "maximum"
        ],
        "result_sample": [
          {
            "count": 2,
            "average": 1.5,
            "total": 3,
            "minimum": 1,
            "maximum": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN store USING COVERING INDEX sqlite_autoindex_store_1'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show me all {category} films",
      "expected_query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN fc USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "What movies do we have in the {category} category?",
      "expected_query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN fc USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "List {category} titles",
      "expected_query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN fc USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Find DVDs in {category}",
      "expected_query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.* FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'X'",
        "execution_time_ms": 0.9996891021728516,
        "row_count": 0,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN fc USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show me what {customer_name} has rented",
      "expected_query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "title",
          "rental_date"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX idx_customer_last_name (last_name=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX idx_rental_fk_customer_id (customer_id=?)'}\n{'id': 20, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 26, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "List rental history for {customer_name}",
      "expected_query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "title",
          "rental_date"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX idx_customer_last_name (last_name=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX idx_rental_fk_customer_id (customer_id=?)'}\n{'id': 20, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 26, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "What films has {customer_name} watched?",
      "expected_query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "title",
          "rental_date"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX idx_customer_last_name (last_name=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX idx_rental_fk_customer_id (customer_id=?)'}\n{'id': 20, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 26, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show me {customer_name}'s rentals",
      "expected_query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT f.title, r.rental_date FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.last_name = 'X'",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "title",
          "rental_date"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX idx_customer_last_name (last_name=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX idx_rental_fk_customer_id (customer_id=?)'}\n{'id': 20, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 26, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show me all overdue rentals",
      "expected_query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"f\": syntax error",
        "execution_plan": "Error getting execution plan: near \"f\": syntax error"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Which customers have late returns?",
      "expected_query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"f\": syntax error",
        "execution_plan": "Error getting execution plan: near \"f\": syntax error"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "List DVDs that are past due",
      "expected_query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"f\": syntax error",
        "execution_plan": "Error getting execution plan: near \"f\": syntax error"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show rentals that haven't been returned on time",
      "expected_query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.first_name, c.last_name, f.title, r.rental_date, r.return_date FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE r.return_date IS NULL AND r.rental_date + INTERVAL f.rental_duration DAY < CURRENT_DATE",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"f\": syntax error",
        "execution_plan": "Error getting execution plan: near \"f\": syntax error"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "How much revenue comes from each category?",
      "expected_query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
        "execution_time_ms": 30.210256576538086,
        "row_count": 16,
        "column_names": [
          "name",
          "revenue"
        ],
        "result_sample": [
          {
            "name": "Sports",
            "revenue": 5314.21
          },
          {
            "name": "Sci-Fi",
            "revenue": 4756.9800000000005
          },
          {
            "name": "Animation",
            "revenue": 4656.3
          },
          {
            "name": "Drama",
            "revenue": 4587.39
          },
          {
            "name": "Comedy",
            "revenue": 4383.58
          },
          {
            "name": "Action",
            "revenue": 4375.85
          },
          {
            "name": "New",
            "revenue": 4351.62
          },
          {
            "name": "Games",
            "revenue": 4281.33
          },
          {
            "name": "Foreign",
            "revenue": 4270.67
          },
          {
            "name": "Family",
            "revenue": 4226.070000000001
          }
        ],
        "error": null,
        "execution_plan": "{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SCAN p'}\n{'id': 17, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 24, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 30, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING COVERING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 35, 'parent': 0, 'notused': 0, 'detail': 'SEARCH fc USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}\n{'id': 43, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 49, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR GROUP BY'}\n{'id': 87, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR ORDER BY'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Which film categories generate the most money?",
      "expected_query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
        "execution_time_ms": 26.996850967407227,
        "row_count": 16,
        "column_names": [
          "name",
          "revenue"
        ],
        "result_sample": [
          {
            "name": "Sports",
            "revenue": 5314.21
          },
          {
            "name": "Sci-Fi",
            "revenue": 4756.9800000000005
          },
          {
            "name": "Animation",
            "revenue": 4656.3
          },
          {
            "name": "Drama",
            "revenue": 4587.39
          },
          {
            "name": "Comedy",
            "revenue": 4383.58
          },
          {
            "name": "Action",
            "revenue": 4375.85
          },
          {
            "name": "New",
            "revenue": 4351.62
          },
          {
            "name": "Games",
            "revenue": 4281.33
          },
          {
            "name": "Foreign",
            "revenue": 4270.67
          },
          {
            "name": "Family",
            "revenue": 4226.070000000001
          }
        ],
        "error": null,
        "execution_plan": "{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SCAN p'}\n{'id': 17, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 24, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 30, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING COVERING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 35, 'parent': 0, 'notused': 0, 'detail': 'SEARCH fc USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}\n{'id': 43, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 49, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR GROUP BY'}\n{'id': 87, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR ORDER BY'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Show sales by category",
      "expected_query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
        "execution_time_ms": 27.00018882751465,
        "row_count": 16,
        "column_names": [
          "name",
          "revenue"
        ],
        "result_sample": [
          {
            "name": "Sports",
            "revenue": 5314.21
          },
          {
            "name": "Sci-Fi",
            "revenue": 4756.9800000000005
          },
          {
            "name": "Animation",
            "revenue": 4656.3
          },
          {
            "name": "Drama",
            "revenue": 4587.39
          },
          {
            "name": "Comedy",
            "revenue": 4383.58
          },
          {
            "name": "Action",
            "revenue": 4375.85
          },
          {
            "name": "New",
            "revenue": 4351.62
          },
          {
            "name": "Games",
            "revenue": 4281.33
          },
          {
            "name": "Foreign",
            "revenue": 4270.67
          },
          {
            "name": "Family",
            "revenue": 4226.070000000001
          }
        ],
        "error": null,
        "execution_plan": "{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SCAN p'}\n{'id': 17, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 24, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 30, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING COVERING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 35, 'parent': 0, 'notused': 0, 'detail': 'SEARCH fc USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}\n{'id': 43, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 49, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR GROUP BY'}\n{'id': 87, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR ORDER BY'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "What's our top earning genre?",
      "expected_query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT c.name, SUM(p.amount) as revenue FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY revenue DESC",
        "execution_time_ms": 27.005672454833984,
        "row_count": 16,
        "column_names": [
          "name",
          "revenue"
        ],
        "result_sample": [
          {
            "name": "Sports",
            "revenue": 5314.21
          },
          {
            "name": "Sci-Fi",
            "revenue": 4756.9800000000005
          },
          {
            "name": "Animation",
            "revenue": 4656.3
          },
          {
            "name": "Drama",
            "revenue": 4587.39
          },
          {
            "name": "Comedy",
            "revenue": 4383.58
          },
          {
            "name": "Action",
            "revenue": 4375.85
          },
          {
            "name": "New",
            "revenue": 4351.62
          },
          {
            "name": "Games",
            "revenue": 4281.33
          },
          {
            "name": "Foreign",
            "revenue": 4270.67
          },
          {
            "name": "Family",
            "revenue": 4226.070000000001
          }
        ],
        "error": null,
        "execution_plan": "{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SCAN p'}\n{'id': 17, 'parent': 0, 'notused': 0, 'detail': 'SEARCH r USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 24, 'parent': 0, 'notused': 0, 'detail': 'SEARCH i USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 30, 'parent': 0, 'notused': 0, 'detail': 'SEARCH f USING COVERING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 35, 'parent': 0, 'notused': 0, 'detail': 'SEARCH fc USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}\n{'id': 43, 'parent': 0, 'notused': 0, 'detail': 'SEARCH c USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 49, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR GROUP BY'}\n{'id': 87, 'parent': 0, 'notused': 0, 'detail': 'USE TEMP B-TREE FOR ORDER BY'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "medium"
    },
    {
      "natural_language": "Complex join across 3 tables: address, city, country",
      "expected_query": "SELECT t1.address_id, t1.address, t2.city_id, t2.city, t3.country_id, t3.country\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id JOIN country t3 ON t2.country_id = t3.country_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.city_id, t2.city, t3.country_id, t3.country\nFROM address t1\nJOIN city t2 ON t1.city_id = t2.city_id JOIN country t3 ON t2.country_id = t3.country_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "city_id",
          "city",
          "country_id",
          "country"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "city_id": 300,
            "city": "Lethbridge",
            "country_id": 20,
            "country": "Canada"
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "city_id": 576,
            "city": "Woodridge",
            "country_id": 8,
            "country": "Australia"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "city_id": 300,
            "city": "Lethbridge",
            "country_id": 20,
            "country": "Canada"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "city_id": 576,
            "city": "Woodridge",
            "country_id": 8,
            "country": "Australia"
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "city_id": 463,
            "city": "Sasebo",
            "country_id": 50,
            "country": "Japan"
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "city_id": 449,
            "city": "San Bernardino",
            "country_id": 103,
            "country": "United States"
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "city_id": 38,
            "city": "Athenai",
            "country_id": 39,
            "country": "Greece"
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "city_id": 349,
            "city": "Myingyan",
            "country_id": 64,
            "country": "Myanmar"
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "city_id": 361,
            "city": "Nantou",
            "country_id": 92,
            "country": "Taiwan"
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "city_id": 295,
            "city": "Laredo",
            "country_id": 103,
            "country": "United States"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_country_1 (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, customer, store",
      "expected_query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "customer_id": 2,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "customer_id": 3,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "customer_id": 4,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "customer_id": 5,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "customer_id": 6,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway",
            "customer_id": 7,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 12,
            "address": "478 Joliet Way",
            "customer_id": 8,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "address_id": 13,
            "address": "613 Korolev Drive",
            "customer_id": 9,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "address_id": 14,
            "address": "1531 Sal Drive",
            "customer_id": 10,
            "store_id": 1,
            "manager_staff_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, customer, payment",
      "expected_query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "customer_id",
          "store_id",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 1
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 2
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 3
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 4
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 5
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 6
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 7
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 8
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 9
          },
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, customer, rental",
      "expected_query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM address t1\nJOIN customer t2 ON t1.address_id = t2.address_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.9980201721191406,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "address_id": 134,
            "address": "758 Junan Lane",
            "customer_id": 130,
            "store_id": 1,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "address_id": 464,
            "address": "76 Kermanshah Manor",
            "customer_id": 459,
            "store_id": 1,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "address_id": 413,
            "address": "692 Amroha Drive",
            "customer_id": 408,
            "store_id": 1,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "address_id": 338,
            "address": "431 Szkesfehrvr Avenue",
            "customer_id": 333,
            "store_id": 2,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "address_id": 226,
            "address": "810 Palghat (Palakkad) Boulevard",
            "customer_id": 222,
            "store_id": 2,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "address_id": 555,
            "address": "1764 Jalib al-Shuyukh Parkway",
            "customer_id": 549,
            "store_id": 1,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "address_id": 274,
            "address": "920 Kumbakonam Loop",
            "customer_id": 269,
            "store_id": 1,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "address_id": 243,
            "address": "47 Syktyvkar Lane",
            "customer_id": 239,
            "store_id": 2,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "address_id": 130,
            "address": "1666 Qomsheh Drive",
            "customer_id": 126,
            "store_id": 1,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "address_id": 404,
            "address": "734 Bchar Place",
            "customer_id": 399,
            "store_id": 1,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, staff, payment",
      "expected_query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 4,
            "customer_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 5,
            "customer_id": 1
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 8,
            "customer_id": 1
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 10,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, staff, rental",
      "expected_query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, staff, store",
      "expected_query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "address_id",
          "address",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, staff, store",
      "expected_query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM address t1\nJOIN staff t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "address_id",
          "address",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, store, customer",
      "expected_query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 2
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 3
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 4
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 5
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 6
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 7
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 8
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 9
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, store, inventory",
      "expected_query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2,
            "film_id": 1
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 3,
            "film_id": 1
          },
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 4,
            "film_id": 1
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 5,
            "film_id": 1
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 6,
            "film_id": 1
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 7,
            "film_id": 1
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 8,
            "film_id": 1
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 9,
            "film_id": 2
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 10,
            "film_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, store, staff",
      "expected_query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "address_id",
          "address",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: address, store, staff",
      "expected_query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.address_id, t1.address, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM address t1\nJOIN store t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 1.0035037994384766,
        "row_count": 2,
        "column_names": [
          "address_id",
          "address",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: city, address, customer",
      "expected_query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "address_id",
          "address",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "city_id": 463,
            "city": "Sasebo",
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "customer_id": 1,
            "store_id": 1
          },
          {
            "city_id": 449,
            "city": "San Bernardino",
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "customer_id": 2,
            "store_id": 1
          },
          {
            "city_id": 38,
            "city": "Athenai",
            "address_id": 7,
            "address": "692 Joliet Street",
            "customer_id": 3,
            "store_id": 1
          },
          {
            "city_id": 349,
            "city": "Myingyan",
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "customer_id": 4,
            "store_id": 2
          },
          {
            "city_id": 361,
            "city": "Nantou",
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "customer_id": 5,
            "store_id": 1
          },
          {
            "city_id": 295,
            "city": "Laredo",
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "customer_id": 6,
            "store_id": 2
          },
          {
            "city_id": 280,
            "city": "Kragujevac",
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway",
            "customer_id": 7,
            "store_id": 1
          },
          {
            "city_id": 200,
            "city": "Hamilton",
            "address_id": 12,
            "address": "478 Joliet Way",
            "customer_id": 8,
            "store_id": 2
          },
          {
            "city_id": 329,
            "city": "Masqat",
            "address_id": 13,
            "address": "613 Korolev Drive",
            "customer_id": 9,
            "store_id": 2
          },
          {
            "city_id": 162,
            "city": "Esfahan",
            "address_id": 14,
            "address": "1531 Sal Drive",
            "customer_id": 10,
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: city, address, staff",
      "expected_query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "city_id",
          "city",
          "address_id",
          "address",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "city_id": 300,
            "city": "Lethbridge",
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "city_id": 576,
            "city": "Woodridge",
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: city, address, store",
      "expected_query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.city_id, t1.city, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM city t1\nJOIN address t2 ON t1.city_id = t2.city_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "city_id",
          "city",
          "address_id",
          "address",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "city_id": 300,
            "city": "Lethbridge",
            "address_id": 1,
            "address": "47 MySakila Drive",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "city_id": 576,
            "city": "Woodridge",
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: country, city, address",
      "expected_query": "SELECT t1.country_id, t1.country, t2.city_id, t2.city, t3.address_id, t3.address\nFROM country t1\nJOIN city t2 ON t1.country_id = t2.country_id JOIN address t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.country_id, t1.country, t2.city_id, t2.city, t3.address_id, t3.address\nFROM country t1\nJOIN city t2 ON t1.country_id = t2.country_id JOIN address t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
        "execution_time_ms": 0.9970664978027344,
        "row_count": 10,
        "column_names": [
          "country_id",
          "country",
          "city_id",
          "city",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "country_id": 20,
            "country": "Canada",
            "city_id": 300,
            "city": "Lethbridge",
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "country_id": 8,
            "country": "Australia",
            "city_id": 576,
            "city": "Woodridge",
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "country_id": 20,
            "country": "Canada",
            "city_id": 300,
            "city": "Lethbridge",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "country_id": 8,
            "country": "Australia",
            "city_id": 576,
            "city": "Woodridge",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "country_id": 50,
            "country": "Japan",
            "city_id": 463,
            "city": "Sasebo",
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "country_id": 103,
            "country": "United States",
            "city_id": 449,
            "city": "San Bernardino",
            "address_id": 6,
            "address": "1121 Loja Avenue"
          },
          {
            "country_id": 39,
            "country": "Greece",
            "city_id": 38,
            "city": "Athenai",
            "address_id": 7,
            "address": "692 Joliet Street"
          },
          {
            "country_id": 64,
            "country": "Myanmar",
            "city_id": 349,
            "city": "Myingyan",
            "address_id": 8,
            "address": "1566 Inegl Manor"
          },
          {
            "country_id": 92,
            "country": "Taiwan",
            "city_id": 361,
            "city": "Nantou",
            "address_id": 9,
            "address": "53 Idfu Parkway"
          },
          {
            "country_id": 103,
            "country": "United States",
            "city_id": 295,
            "city": "Laredo",
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_country_1 (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, address, city",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.city_id, t3.city\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.city_id, t3.city\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "address_id",
          "address",
          "city_id",
          "city"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "city_id": 463,
            "city": "Sasebo"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "city_id": 449,
            "city": "San Bernardino"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "address_id": 7,
            "address": "692 Joliet Street",
            "city_id": 38,
            "city": "Athenai"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "city_id": 349,
            "city": "Myingyan"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "city_id": 361,
            "city": "Nantou"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "city_id": 295,
            "city": "Laredo"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway",
            "city_id": 280,
            "city": "Kragujevac"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "address_id": 12,
            "address": "478 Joliet Way",
            "city_id": 200,
            "city": "Hamilton"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "address_id": 13,
            "address": "613 Korolev Drive",
            "city_id": 329,
            "city": "Masqat"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "address_id": 14,
            "address": "1531 Sal Drive",
            "city_id": 162,
            "city": "Esfahan"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, address, staff",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "customer_id",
          "store_id",
          "address_id",
          "address",
          "staff_id",
          "first_name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, address, store",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM customer t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.9996891021728516,
        "row_count": 0,
        "column_names": [
          "customer_id",
          "store_id",
          "address_id",
          "address",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_customer_fk_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, store, inventory",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 12,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 15,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 17,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "customer_id": 19,
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_customer_fk_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, store, staff",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, store, address",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, store, staff",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, payment, staff",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.payment_id, t2.customer_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN payment t2 ON t1.customer_id = t2.customer_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.payment_id, t2.customer_id, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN payment t2 ON t1.customer_id = t2.customer_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 2,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 3,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 4,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 5,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 6,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 7,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 8,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 9,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 10,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, payment, rental",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.payment_id, t2.customer_id, t3.rental_id, t3.rental_date\nFROM customer t1\nJOIN payment t2 ON t1.customer_id = t2.customer_id JOIN rental t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.payment_id, t2.customer_id, t3.rental_id, t3.rental_date\nFROM customer t1\nJOIN payment t2 ON t1.customer_id = t2.customer_id JOIN rental t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "payment_id",
          "customer_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 2,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 3,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 4,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 5,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 6,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 7,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 8,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 9,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000"
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "payment_id": 10,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, rental, payment",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "payment_id": 1
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "payment_id": 2
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "payment_id": 3
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "payment_id": 4
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "payment_id": 5
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "payment_id": 6
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "payment_id": 7
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "payment_id": 8
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "payment_id": 9
          },
          {
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "payment_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, rental, inventory",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "customer_id": 130,
            "store_id": 1,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "film_id": 80
          },
          {
            "customer_id": 459,
            "store_id": 1,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "film_id": 333
          },
          {
            "customer_id": 408,
            "store_id": 1,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "film_id": 373
          },
          {
            "customer_id": 333,
            "store_id": 2,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "film_id": 535
          },
          {
            "customer_id": 222,
            "store_id": 2,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "film_id": 450
          },
          {
            "customer_id": 549,
            "store_id": 1,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "film_id": 613
          },
          {
            "customer_id": 269,
            "store_id": 1,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "film_id": 870
          },
          {
            "customer_id": 239,
            "store_id": 2,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "film_id": 510
          },
          {
            "customer_id": 126,
            "store_id": 1,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "film_id": 565
          },
          {
            "customer_id": 399,
            "store_id": 1,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "film_id": 396
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: customer, rental, staff",
      "expected_query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.customer_id, t1.store_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM customer t1\nJOIN rental t2 ON t1.customer_id = t2.customer_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 1.001596450805664,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "customer_id": 130,
            "store_id": 1,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 459,
            "store_id": 1,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 408,
            "store_id": 1,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 333,
            "store_id": 2,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 222,
            "store_id": 2,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 549,
            "store_id": 1,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 269,
            "store_id": 1,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 239,
            "store_id": 2,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "customer_id": 126,
            "store_id": 1,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "customer_id": 399,
            "store_id": 1,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, customer, address",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 2,
            "address_id": 6,
            "address": "1121 Loja Avenue"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 3,
            "address_id": 7,
            "address": "692 Joliet Street"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 4,
            "address_id": 8,
            "address": "1566 Inegl Manor"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 5,
            "address_id": 9,
            "address": "53 Idfu Parkway"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 6,
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 7,
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 8,
            "address_id": 12,
            "address": "478 Joliet Way"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 9,
            "address_id": 13,
            "address": "613 Korolev Drive"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 10,
            "address_id": 14,
            "address": "1531 Sal Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, customer, payment",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 2
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 3
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 4
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 5
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 6
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 7
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 8
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 9
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1,
            "payment_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, customer, rental",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN customer t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 130,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 459,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 408,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 333,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 222,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 549,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 269,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 239,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 126,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 399,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, inventory, film",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.inventory_id, t2.film_id, t3.film_id, t3.title\nFROM store t1\nJOIN inventory t2 ON t1.store_id = t2.store_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.inventory_id, t2.film_id, t3.film_id, t3.title\nFROM store t1\nJOIN inventory t2 ON t1.store_id = t2.store_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.9984970092773438,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id",
          "film_id",
          "title"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 3,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 4,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 5,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 6,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 7,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 8,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 9,
            "film_id": 2,
            "title": "ACE GOLDFINGER"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 10,
            "film_id": 2,
            "title": "ACE GOLDFINGER"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, inventory, rental",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.inventory_id, t2.film_id, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN inventory t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.inventory_id, t2.film_id, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN inventory t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 367,
            "film_id": 80,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 1525,
            "film_id": 333,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 1711,
            "film_id": 373,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2452,
            "film_id": 535,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 2079,
            "film_id": 450,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2792,
            "film_id": 613,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 3995,
            "film_id": 870,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2346,
            "film_id": 510,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2580,
            "film_id": 565,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 1824,
            "film_id": 396,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, payment",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 4,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 5,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 8,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 10,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, rental",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 1.0004043579101562,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, address",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, address, city",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.city_id, t3.city\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.city_id, t3.city\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "address",
          "city_id",
          "city"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive",
            "city_id": 300,
            "city": "Lethbridge"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard",
            "city_id": 576,
            "city": "Woodridge"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, address, customer",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "address",
          "customer_id",
          "store_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_customer_fk_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, address, staff",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.address_id, t2.address, t3.staff_id, t3.first_name\nFROM store t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN staff t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "address",
          "staff_id",
          "first_name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, payment",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 4,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 5,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 8,
            "customer_id": 1
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 10,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, rental",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: store, staff, address",
      "expected_query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.store_id, t1.manager_staff_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM store t1\nJOIN staff t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film, film_actor, actor",
      "expected_query": "SELECT t1.film_id, t1.title, t2.actor_id, t2.film_id, t3.actor_id, t3.first_name\nFROM film t1\nJOIN film_actor t2 ON t1.film_id = t2.film_id JOIN actor t3 ON t2.actor_id = t3.actor_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.title, t2.actor_id, t2.film_id, t3.actor_id, t3.first_name\nFROM film t1\nJOIN film_actor t2 ON t1.film_id = t2.film_id JOIN actor t3 ON t2.actor_id = t3.actor_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "actor_id",
          "film_id",
          "actor_id",
          "first_name"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 23,
            "title": "ANACONDA CONFESSIONS",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 25,
            "title": "ANGELS LIFE",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 106,
            "title": "BULWORTH COMMANDMENTS",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 140,
            "title": "CHEAPER CLYDE",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 166,
            "title": "COLOR PHILADELPHIA",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 277,
            "title": "ELEPHANT TROJAN",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 361,
            "title": "GLEAMING JAWBREAKER",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 438,
            "title": "HUMAN GRAFFITI",
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "film_id": 499,
            "title": "KING EVOLUTION",
            "actor_id": 1,
            "first_name": "PENELOPE"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film, film_category, category",
      "expected_query": "SELECT t1.film_id, t1.title, t2.film_id, t2.category_id, t3.category_id, t3.name\nFROM film t1\nJOIN film_category t2 ON t1.film_id = t2.film_id JOIN category t3 ON t2.category_id = t3.category_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.title, t2.film_id, t2.category_id, t3.category_id, t3.name\nFROM film t1\nJOIN film_category t2 ON t1.film_id = t2.film_id JOIN category t3 ON t2.category_id = t3.category_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "film_id",
          "category_id",
          "category_id",
          "name"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6,
            "name": "Documentary"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "category_id": 11,
            "name": "Horror"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "category_id": 6,
            "name": "Documentary"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "category_id": 11,
            "name": "Horror"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "category_id": 8,
            "name": "Family"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "category_id": 9,
            "name": "Foreign"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "category_id": 5,
            "name": "Comedy"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "category_id": 11,
            "name": "Horror"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "category_id": 11,
            "name": "Horror"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "category_id": 15,
            "name": "Sports"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_category_1 (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film, inventory, store",
      "expected_query": "SELECT t1.film_id, t1.title, t2.inventory_id, t2.film_id, t3.store_id, t3.manager_staff_id\nFROM film t1\nJOIN inventory t2 ON t1.film_id = t2.film_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.title, t2.inventory_id, t2.film_id, t3.store_id, t3.manager_staff_id\nFROM film t1\nJOIN inventory t2 ON t1.film_id = t2.film_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 2,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 3,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 4,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 5,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 6,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 7,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 8,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "inventory_id": 9,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "inventory_id": 10,
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film, inventory, rental",
      "expected_query": "SELECT t1.film_id, t1.title, t2.inventory_id, t2.film_id, t3.rental_id, t3.rental_date\nFROM film t1\nJOIN inventory t2 ON t1.film_id = t2.film_id JOIN rental t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.title, t2.inventory_id, t2.film_id, t3.rental_id, t3.rental_date\nFROM film t1\nJOIN inventory t2 ON t1.film_id = t2.film_id JOIN rental t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "inventory_id",
          "film_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "film_id": 80,
            "title": "BLANKET BEVERLY",
            "inventory_id": 367,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "film_id": 333,
            "title": "FREAKY POCUS",
            "inventory_id": 1525,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "film_id": 373,
            "title": "GRADUATE LORD",
            "inventory_id": 1711,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "film_id": 535,
            "title": "LOVE SUICIDES",
            "inventory_id": 2452,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000"
          },
          {
            "film_id": 450,
            "title": "IDOLS SNATCHERS",
            "inventory_id": 2079,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "film_id": 613,
            "title": "MYSTIC TRUMAN",
            "inventory_id": 2792,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "film_id": 870,
            "title": "SWARM GOLD",
            "inventory_id": 3995,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000"
          },
          {
            "film_id": 510,
            "title": "LAWLESS VISION",
            "inventory_id": 2346,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000"
          },
          {
            "film_id": 565,
            "title": "MATRIX SNOWMAN",
            "inventory_id": 2580,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "film_id": 396,
            "title": "HANGING DEEP",
            "inventory_id": 1824,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, film_actor",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 1.001596450805664,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "actor_id",
          "film_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, film_category",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.9987354278564453,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "film_id",
          "category_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, inventory",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, film_actor",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 1.0001659393310547,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "actor_id",
          "film_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, film_category",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "film_id",
          "category_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: language, film, inventory",
      "expected_query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.language_id, t1.name, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM language t1\nJOIN film t2 ON t1.language_id = t2.original_language_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "film_id",
          "title",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_actor, film, language",
      "expected_query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 0.9987354278564453,
        "row_count": 0,
        "column_names": [
          "actor_id",
          "film_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_actor, film, language",
      "expected_query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 1.5044212341308594,
        "row_count": 0,
        "column_names": [
          "actor_id",
          "film_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_actor, film, film_category",
      "expected_query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "film_id",
          "title",
          "film_id",
          "category_id"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "title": "ANACONDA CONFESSIONS",
            "category_id": 2
          },
          {
            "actor_id": 1,
            "film_id": 25,
            "title": "ANGELS LIFE",
            "category_id": 13
          },
          {
            "actor_id": 1,
            "film_id": 106,
            "title": "BULWORTH COMMANDMENTS",
            "category_id": 10
          },
          {
            "actor_id": 1,
            "film_id": 140,
            "title": "CHEAPER CLYDE",
            "category_id": 14
          },
          {
            "actor_id": 1,
            "film_id": 166,
            "title": "COLOR PHILADELPHIA",
            "category_id": 4
          },
          {
            "actor_id": 1,
            "film_id": 277,
            "title": "ELEPHANT TROJAN",
            "category_id": 11
          },
          {
            "actor_id": 1,
            "film_id": 361,
            "title": "GLEAMING JAWBREAKER",
            "category_id": 15
          },
          {
            "actor_id": 1,
            "film_id": 438,
            "title": "HUMAN GRAFFITI",
            "category_id": 10
          },
          {
            "actor_id": 1,
            "film_id": 499,
            "title": "KING EVOLUTION",
            "category_id": 8
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_actor, film, inventory",
      "expected_query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.actor_id, t1.film_id, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM film_actor t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "film_id",
          "film_id",
          "title",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 1
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 2
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 3
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 4
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 5
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 6
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 7
          },
          {
            "actor_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 8
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "title": "ANACONDA CONFESSIONS",
            "inventory_id": 115
          },
          {
            "actor_id": 1,
            "film_id": 23,
            "title": "ANACONDA CONFESSIONS",
            "inventory_id": 116
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_film_id (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: actor, film_actor, film",
      "expected_query": "SELECT t1.actor_id, t1.first_name, t2.actor_id, t2.film_id, t3.film_id, t3.title\nFROM actor t1\nJOIN film_actor t2 ON t1.actor_id = t2.actor_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.actor_id, t1.first_name, t2.actor_id, t2.film_id, t3.film_id, t3.title\nFROM actor t1\nJOIN film_actor t2 ON t1.actor_id = t2.actor_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "first_name",
          "actor_id",
          "film_id",
          "film_id",
          "title"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 23,
            "title": "ANACONDA CONFESSIONS"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 25,
            "title": "ANGELS LIFE"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 106,
            "title": "BULWORTH COMMANDMENTS"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 140,
            "title": "CHEAPER CLYDE"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 166,
            "title": "COLOR PHILADELPHIA"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 277,
            "title": "ELEPHANT TROJAN"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 361,
            "title": "GLEAMING JAWBREAKER"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 438,
            "title": "HUMAN GRAFFITI"
          },
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "film_id": 499,
            "title": "KING EVOLUTION"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_category, film, language",
      "expected_query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "category_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 1.0013580322265625,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_category, film, language",
      "expected_query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "film_id",
          "category_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_category, film, film_actor",
      "expected_query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "film_id",
          "title",
          "actor_id",
          "film_id"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 1
          },
          {
            "film_id": 23,
            "category_id": 2,
            "title": "ANACONDA CONFESSIONS",
            "actor_id": 1
          },
          {
            "film_id": 25,
            "category_id": 13,
            "title": "ANGELS LIFE",
            "actor_id": 1
          },
          {
            "film_id": 106,
            "category_id": 10,
            "title": "BULWORTH COMMANDMENTS",
            "actor_id": 1
          },
          {
            "film_id": 140,
            "category_id": 14,
            "title": "CHEAPER CLYDE",
            "actor_id": 1
          },
          {
            "film_id": 166,
            "category_id": 4,
            "title": "COLOR PHILADELPHIA",
            "actor_id": 1
          },
          {
            "film_id": 277,
            "category_id": 11,
            "title": "ELEPHANT TROJAN",
            "actor_id": 1
          },
          {
            "film_id": 361,
            "category_id": 15,
            "title": "GLEAMING JAWBREAKER",
            "actor_id": 1
          },
          {
            "film_id": 438,
            "category_id": 10,
            "title": "HUMAN GRAFFITI",
            "actor_id": 1
          },
          {
            "film_id": 499,
            "category_id": 8,
            "title": "KING EVOLUTION",
            "actor_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3 USING COVERING INDEX sqlite_autoindex_film_actor_1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: film_category, film, inventory",
      "expected_query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.film_id, t1.category_id, t2.film_id, t2.title, t3.inventory_id, t3.film_id\nFROM film_category t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN inventory t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "category_id",
          "film_id",
          "title",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 1
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 2
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 3
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 4
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 5
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 6
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 7
          },
          {
            "film_id": 1,
            "category_id": 6,
            "title": "ACADEMY DINOSAUR",
            "inventory_id": 8
          },
          {
            "film_id": 2,
            "category_id": 11,
            "title": "ACE GOLDFINGER",
            "inventory_id": 9
          },
          {
            "film_id": 2,
            "category_id": 11,
            "title": "ACE GOLDFINGER",
            "inventory_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: category, film_category, film",
      "expected_query": "SELECT t1.category_id, t1.name, t2.film_id, t2.category_id, t3.film_id, t3.title\nFROM category t1\nJOIN film_category t2 ON t1.category_id = t2.category_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.category_id, t1.name, t2.film_id, t2.category_id, t3.film_id, t3.title\nFROM category t1\nJOIN film_category t2 ON t1.category_id = t2.category_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "category_id",
          "name",
          "film_id",
          "category_id",
          "film_id",
          "title"
        ],
        "result_sample": [
          {
            "category_id": 6,
            "name": "Documentary",
            "film_id": 1,
            "title": "ACADEMY DINOSAUR"
          },
          {
            "category_id": 11,
            "name": "Horror",
            "film_id": 2,
            "title": "ACE GOLDFINGER"
          },
          {
            "category_id": 6,
            "name": "Documentary",
            "film_id": 3,
            "title": "ADAPTATION HOLES"
          },
          {
            "category_id": 11,
            "name": "Horror",
            "film_id": 4,
            "title": "AFFAIR PREJUDICE"
          },
          {
            "category_id": 8,
            "name": "Family",
            "film_id": 5,
            "title": "AFRICAN EGG"
          },
          {
            "category_id": 9,
            "name": "Foreign",
            "film_id": 6,
            "title": "AGENT TRUMAN"
          },
          {
            "category_id": 5,
            "name": "Comedy",
            "film_id": 7,
            "title": "AIRPLANE SIERRA"
          },
          {
            "category_id": 11,
            "name": "Horror",
            "film_id": 8,
            "title": "AIRPORT POLLOCK"
          },
          {
            "category_id": 11,
            "name": "Horror",
            "film_id": 9,
            "title": "ALABAMA DEVIL"
          },
          {
            "category_id": 15,
            "name": "Sports",
            "film_id": 10,
            "title": "ALADDIN CALENDAR"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2 USING COVERING INDEX sqlite_autoindex_film_category_1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, film, language",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "inventory_id",
          "film_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, film, language",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.language_id, t3.name\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN language t3 ON t2.original_language_id = t3.language_id\nLIMIT 10;",
        "execution_time_ms": 1.0025501251220703,
        "row_count": 0,
        "column_names": [
          "inventory_id",
          "film_id",
          "film_id",
          "title",
          "language_id",
          "name"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_language_1 (language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, film, film_actor",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.actor_id, t3.film_id\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_actor t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "film_id",
          "title",
          "actor_id",
          "film_id"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 1
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 10
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 20
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 30
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 40
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 53
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 108
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 162
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 188
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "actor_id": 198
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_film_actor_film (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, film, film_category",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.film_id, t2.title, t3.film_id, t3.category_id\nFROM inventory t1\nJOIN film t2 ON t1.film_id = t2.film_id JOIN film_category t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "film_id",
          "title",
          "film_id",
          "category_id"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "category_id": 6
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "category_id": 11
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "category_id": 11
          }
        ],
        "error": null,
        "execution_plan": "{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 14, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING COVERING INDEX sqlite_autoindex_film_category_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, store, customer",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 2
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 3
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 5
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 7
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 10
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 12
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 15
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 17
          },
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 19
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_customer_fk_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, store, staff",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, store, address",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, store, staff",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.store_id, t2.manager_staff_id, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN staff t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "manager_staff_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 5,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "manager_staff_id": 2,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, rental, payment",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "rental_id",
          "rental_date",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "inventory_id": 3021,
            "film_id": 663,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "inventory_id": 4020,
            "film_id": 875,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "inventory_id": 2785,
            "film_id": 611,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "inventory_id": 1021,
            "film_id": 228,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "payment_id": 4,
            "customer_id": 1
          },
          {
            "inventory_id": 1407,
            "film_id": 308,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "payment_id": 5,
            "customer_id": 1
          },
          {
            "inventory_id": 726,
            "film_id": 159,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "inventory_id": 197,
            "film_id": 44,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "inventory_id": 3497,
            "film_id": 766,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "payment_id": 8,
            "customer_id": 1
          },
          {
            "inventory_id": 4566,
            "film_id": 997,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "inventory_id": 1443,
            "film_id": 316,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "payment_id": 10,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, rental, customer",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "inventory_id": 367,
            "film_id": 80,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1
          },
          {
            "inventory_id": 1525,
            "film_id": 333,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "customer_id": 459,
            "store_id": 1
          },
          {
            "inventory_id": 1711,
            "film_id": 373,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "customer_id": 408,
            "store_id": 1
          },
          {
            "inventory_id": 2452,
            "film_id": 535,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "customer_id": 333,
            "store_id": 2
          },
          {
            "inventory_id": 2079,
            "film_id": 450,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "customer_id": 222,
            "store_id": 2
          },
          {
            "inventory_id": 2792,
            "film_id": 613,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "customer_id": 549,
            "store_id": 1
          },
          {
            "inventory_id": 3995,
            "film_id": 870,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "customer_id": 269,
            "store_id": 1
          },
          {
            "inventory_id": 2346,
            "film_id": 510,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "customer_id": 239,
            "store_id": 2
          },
          {
            "inventory_id": 2580,
            "film_id": 565,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "customer_id": 126,
            "store_id": 1
          },
          {
            "inventory_id": 1824,
            "film_id": 396,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "customer_id": 399,
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: inventory, rental, staff",
      "expected_query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.inventory_id, t1.film_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM inventory t1\nJOIN rental t2 ON t1.inventory_id = t2.inventory_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "inventory_id": 367,
            "film_id": 80,
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 1525,
            "film_id": 333,
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 1711,
            "film_id": 373,
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 2452,
            "film_id": 535,
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 2079,
            "film_id": 450,
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 2792,
            "film_id": 613,
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 3995,
            "film_id": 870,
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 2346,
            "film_id": 510,
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "inventory_id": 2580,
            "film_id": 565,
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "inventory_id": 1824,
            "film_id": 396,
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, staff, rental",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.rental_id, t3.rental_date\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN rental t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 13,
            "rental_date": "2005-05-25 00:22:55.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 14,
            "rental_date": "2005-05-25 00:31:15.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 15,
            "rental_date": "2005-05-25 00:39:22.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 17,
            "rental_date": "2005-05-25 01:06:36.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_rental_fk_staff_id (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, staff, address",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, staff, store",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, staff, store",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, customer, address",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.9984970092773438,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "customer_id",
          "store_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "store_id": 1,
            "address_id": 5,
            "address": "1913 Hanoi Way"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, customer, store",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "store_id": 1,
            "manager_staff_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, customer, rental",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.customer_id, t2.store_id, t3.rental_id, t3.rental_date\nFROM payment t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN rental t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "customer_id",
          "store_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000"
          },
          {
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_rental_fk_customer_id (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, rental, customer",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "store_id": 1
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "store_id": 1
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "store_id": 1
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "store_id": 1
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "store_id": 1
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "store_id": 1
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "store_id": 1
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "store_id": 1
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "store_id": 1
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, rental, inventory",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "rental_id",
          "rental_date",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "inventory_id": 3021,
            "film_id": 663
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "inventory_id": 4020,
            "film_id": 875
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "inventory_id": 2785,
            "film_id": 611
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "inventory_id": 1021,
            "film_id": 228
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "inventory_id": 1407,
            "film_id": 308
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "inventory_id": 726,
            "film_id": 159
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "inventory_id": 197,
            "film_id": 44
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "inventory_id": 3497,
            "film_id": 766
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "inventory_id": 4566,
            "film_id": 997
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "inventory_id": 1443,
            "film_id": 316
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: payment, rental, staff",
      "expected_query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.payment_id, t1.customer_id, t2.rental_id, t2.rental_date, t3.staff_id, t3.first_name\nFROM payment t1\nJOIN rental t2 ON t1.rental_id = t2.rental_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "payment_id",
          "customer_id",
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "payment_id": 1,
            "customer_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "payment_id": 2,
            "customer_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "payment_id": 3,
            "customer_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "payment_id": 4,
            "customer_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "payment_id": 5,
            "customer_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "payment_id": 6,
            "customer_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "payment_id": 7,
            "customer_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "payment_id": 8,
            "customer_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "payment_id": 9,
            "customer_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "payment_id": 10,
            "customer_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, payment, customer",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.payment_id, t2.customer_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN payment t2 ON t1.staff_id = t2.staff_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.payment_id, t2.customer_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN payment t2 ON t1.staff_id = t2.staff_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 4,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 5,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 8,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 10,
            "customer_id": 1,
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, payment, rental",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.payment_id, t2.customer_id, t3.rental_id, t3.rental_date\nFROM staff t1\nJOIN payment t2 ON t1.staff_id = t2.staff_id JOIN rental t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.payment_id, t2.customer_id, t3.rental_id, t3.rental_date\nFROM staff t1\nJOIN payment t2 ON t1.staff_id = t2.staff_id JOIN rental t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id",
          "rental_id",
          "rental_date"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1,
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1,
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1,
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 4,
            "customer_id": 1,
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 5,
            "customer_id": 1,
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1,
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1,
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 8,
            "customer_id": 1,
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000"
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1,
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "payment_id": 10,
            "customer_id": 1,
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, rental, payment",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.payment_id, t3.customer_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN payment t3 ON t2.rental_id = t3.rental_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "payment_id": 4,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "payment_id": 5,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "payment_id": 8,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "payment_id": 10,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, rental, customer",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "customer_id": 459,
            "store_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "customer_id": 408,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "customer_id": 333,
            "store_id": 2
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "customer_id": 222,
            "store_id": 2
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "customer_id": 549,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "customer_id": 269,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "customer_id": 239,
            "store_id": 2
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "customer_id": 126,
            "store_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "customer_id": 399,
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, rental, inventory",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.rental_id, t2.rental_date, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN rental t2 ON t1.staff_id = t2.staff_id JOIN inventory t3 ON t2.inventory_id = t3.inventory_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "rental_id",
          "rental_date",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "film_id": 80
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "film_id": 333
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "film_id": 373
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "film_id": 535
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "film_id": 450
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "film_id": 613
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "film_id": 870
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "film_id": 510
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "film_id": 565
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "film_id": 396
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, address, city",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.city_id, t3.city\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.city_id, t3.city\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN city t3 ON t2.city_id = t3.city_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "address_id",
          "address",
          "city_id",
          "city"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane",
            "city_id": 300,
            "city": "Lethbridge"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive",
            "city_id": 576,
            "city": "Woodridge"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_city_1 (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, address, customer",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN customer t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 1.0004043579101562,
        "row_count": 0,
        "column_names": [
          "staff_id",
          "first_name",
          "address_id",
          "address",
          "customer_id",
          "store_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, address, store",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.address_id, t2.address, t3.store_id, t3.manager_staff_id\nFROM staff t1\nJOIN address t2 ON t1.address_id = t2.address_id JOIN store t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "staff_id",
          "first_name",
          "address_id",
          "address",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, customer",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 2
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 3
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 4
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 5
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 6
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 7
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 8
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 9
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, inventory",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 3,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 4,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 5,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 6,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 7,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 8,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 9,
            "film_id": 2
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 10,
            "film_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, address",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, customer",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.customer_id, t3.store_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN customer t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 2
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 3
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 4
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 5
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 6
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 7
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 8
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "customer_id": 9
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "customer_id": 10
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, inventory",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.inventory_id, t3.film_id\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN inventory t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "inventory_id",
          "film_id"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 1,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 2,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 3,
            "film_id": 1
          },
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "inventory_id": 4,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 5,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 6,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 7,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 8,
            "film_id": 1
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 9,
            "film_id": 2
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "inventory_id": 10,
            "film_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t3'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX idx_fk_staff_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: staff, store, address",
      "expected_query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.staff_id, t1.first_name, t2.store_id, t2.manager_staff_id, t3.address_id, t3.address\nFROM staff t1\nJOIN store t2 ON t1.store_id = t2.store_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "address": "47 MySakila Drive"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "address": "28 MySQL Boulevard"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, payment, staff",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.payment_id, t2.customer_id, t3.staff_id, t3.first_name\nFROM rental t1\nJOIN payment t2 ON t1.rental_id = t2.rental_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.payment_id, t2.customer_id, t3.staff_id, t3.first_name\nFROM rental t1\nJOIN payment t2 ON t1.rental_id = t2.rental_id JOIN staff t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "payment_id",
          "customer_id",
          "staff_id",
          "first_name"
        ],
        "result_sample": [
          {
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "payment_id": 1,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "payment_id": 2,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "payment_id": 3,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "payment_id": 4,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "payment_id": 5,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "payment_id": 6,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "payment_id": 7,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "payment_id": 8,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon"
          },
          {
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "payment_id": 9,
            "customer_id": 1,
            "staff_id": 1,
            "first_name": "Mike"
          },
          {
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "payment_id": 10,
            "customer_id": 1,
            "staff_id": 2,
            "first_name": "Jon"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, payment, customer",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.payment_id, t2.customer_id, t3.customer_id, t3.store_id\nFROM rental t1\nJOIN payment t2 ON t1.rental_id = t2.rental_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.payment_id, t2.customer_id, t3.customer_id, t3.store_id\nFROM rental t1\nJOIN payment t2 ON t1.rental_id = t2.rental_id JOIN customer t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "payment_id",
          "customer_id",
          "customer_id",
          "store_id"
        ],
        "result_sample": [
          {
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "payment_id": 1,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "payment_id": 2,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "payment_id": 3,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "payment_id": 4,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "payment_id": 5,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 1725,
            "rental_date": "2005-06-16 15:18:57.000",
            "payment_id": 6,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 2308,
            "rental_date": "2005-06-18 08:41:48.000",
            "payment_id": 7,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 2363,
            "rental_date": "2005-06-18 13:33:59.000",
            "payment_id": 8,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 3284,
            "rental_date": "2005-06-21 06:24:45.000",
            "payment_id": 9,
            "customer_id": 1,
            "store_id": 1
          },
          {
            "rental_id": 4526,
            "rental_date": "2005-07-08 03:17:05.000",
            "payment_id": 10,
            "customer_id": 1,
            "store_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t2'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t1 USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 16, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, customer, address",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.address_id, t3.address\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "address_id": 134,
            "address": "758 Junan Lane"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "customer_id": 459,
            "store_id": 1,
            "address_id": 464,
            "address": "76 Kermanshah Manor"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "customer_id": 408,
            "store_id": 1,
            "address_id": 413,
            "address": "692 Amroha Drive"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "customer_id": 333,
            "store_id": 2,
            "address_id": 338,
            "address": "431 Szkesfehrvr Avenue"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "customer_id": 222,
            "store_id": 2,
            "address_id": 226,
            "address": "810 Palghat (Palakkad) Boulevard"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "customer_id": 549,
            "store_id": 1,
            "address_id": 555,
            "address": "1764 Jalib al-Shuyukh Parkway"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "customer_id": 269,
            "store_id": 1,
            "address_id": 274,
            "address": "920 Kumbakonam Loop"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "customer_id": 239,
            "store_id": 2,
            "address_id": 243,
            "address": "47 Syktyvkar Lane"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "customer_id": 126,
            "store_id": 1,
            "address_id": 130,
            "address": "1666 Qomsheh Drive"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "customer_id": 399,
            "store_id": 1,
            "address_id": 404,
            "address": "734 Bchar Place"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, customer, store",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "customer_id": 459,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "customer_id": 408,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "customer_id": 333,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "customer_id": 222,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "customer_id": 549,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "customer_id": 269,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "customer_id": 239,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "customer_id": 126,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "customer_id": 399,
            "store_id": 1,
            "manager_staff_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, customer, payment",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.customer_id, t2.store_id, t3.payment_id, t3.customer_id\nFROM rental t1\nJOIN customer t2 ON t1.customer_id = t2.customer_id JOIN payment t3 ON t2.customer_id = t3.customer_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "customer_id",
          "store_id",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3504
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3505
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3506
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3507
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3508
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3509
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3510
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3511
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3512
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "customer_id": 130,
            "store_id": 1,
            "payment_id": 3513
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_customer_id (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, inventory, film",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.inventory_id, t2.film_id, t3.film_id, t3.title\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.inventory_id, t2.film_id, t3.film_id, t3.title\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id JOIN film t3 ON t2.film_id = t3.film_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "film_id",
          "film_id",
          "title"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "film_id": 80,
            "title": "BLANKET BEVERLY"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "film_id": 333,
            "title": "FREAKY POCUS"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "film_id": 373,
            "title": "GRADUATE LORD"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "film_id": 535,
            "title": "LOVE SUICIDES"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "film_id": 450,
            "title": "IDOLS SNATCHERS"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "film_id": 613,
            "title": "MYSTIC TRUMAN"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "film_id": 870,
            "title": "SWARM GOLD"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "film_id": 510,
            "title": "LAWLESS VISION"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "film_id": 565,
            "title": "MATRIX SNOWMAN"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "film_id": 396,
            "title": "HANGING DEEP"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_film_1 (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, inventory, store",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.inventory_id, t2.film_id, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.inventory_id, t2.film_id, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN inventory t2 ON t1.inventory_id = t2.inventory_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "film_id",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "film_id": 80,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "film_id": 333,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "film_id": 373,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "film_id": 535,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "film_id": 450,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "film_id": 613,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "film_id": 870,
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "film_id": 510,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "film_id": 565,
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "film_id": 396,
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, staff, payment",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.payment_id, t3.customer_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN payment t3 ON t2.staff_id = t3.staff_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name",
          "payment_id",
          "customer_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 1,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 2,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 3,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 6,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 7,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 9,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 11,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 12,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 13,
            "customer_id": 1
          },
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "payment_id": 14,
            "customer_id": 1
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX idx_fk_staff_id (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, staff, address",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.address_id, t3.address\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN address t3 ON t2.address_id = t3.address_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name",
          "address_id",
          "address"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "staff_id": 1,
            "first_name": "Mike",
            "address_id": 3,
            "address": "23 Workhaven Lane"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "staff_id": 2,
            "first_name": "Jon",
            "address_id": 4,
            "address": "1411 Lillydale Drive"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_address_1 (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, staff, store",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Complex join across 3 tables: rental, staff, store",
      "expected_query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT t1.rental_id, t1.rental_date, t2.staff_id, t2.first_name, t3.store_id, t3.manager_staff_id\nFROM rental t1\nJOIN staff t2 ON t1.staff_id = t2.staff_id JOIN store t3 ON t2.store_id = t3.store_id\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "staff_id",
          "first_name",
          "store_id",
          "manager_staff_id"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "staff_id": 1,
            "first_name": "Mike",
            "store_id": 1,
            "manager_staff_id": 1
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "staff_id": 2,
            "first_name": "Jon",
            "store_id": 2,
            "manager_staff_id": 2
          }
        ],
        "error": null,
        "execution_plan": "{'id': 7, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 9, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t2 USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 15, 'parent': 0, 'notused': 0, 'detail': 'SEARCH t3 USING INDEX sqlite_autoindex_store_1 (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from actor",
      "expected_query": "SELECT *\nFROM actor\nWHERE actor_id IN (\n    SELECT actor_id\n    FROM film_actor\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM actor\nWHERE actor_id IN (\n    SELECT actor_id\n    FROM film_actor\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 5,
        "column_names": [
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "last_name": "GUINESS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 2,
            "first_name": "NICK",
            "last_name": "WAHLBERG",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 3,
            "first_name": "ED",
            "last_name": "CHASE",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 4,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 5,
            "first_name": "JOHNNY",
            "last_name": "LOLLOBRIGIDA",
            "last_update": "2020-12-23 07:12:29"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH actor USING INDEX sqlite_autoindex_actor_1 (actor_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN film_actor USING COVERING INDEX idx_fk_film_actor_actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with actor and film_actor",
      "expected_query": "SELECT *\nFROM actor t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_actor t2\n    WHERE t2.actor_id = t1.actor_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM actor t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_actor t2\n    WHERE t2.actor_id = t1.actor_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "first_name",
          "last_name",
          "last_update"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE",
            "last_name": "GUINESS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 2,
            "first_name": "NICK",
            "last_name": "WAHLBERG",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 3,
            "first_name": "ED",
            "last_name": "CHASE",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 4,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 5,
            "first_name": "JOHNNY",
            "last_name": "LOLLOBRIGIDA",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 6,
            "first_name": "BETTE",
            "last_name": "NICHOLSON",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 7,
            "first_name": "GRACE",
            "last_name": "MOSTEL",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 8,
            "first_name": "MATTHEW",
            "last_name": "JOHANSSON",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 9,
            "first_name": "JOE",
            "last_name": "SWANK",
            "last_update": "2020-12-23 07:12:29"
          },
          {
            "actor_id": 10,
            "first_name": "CHRISTIAN",
            "last_name": "GABLE",
            "last_update": "2020-12-23 07:12:29"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_film_actor_actor (actor_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from address",
      "expected_query": "SELECT *\nFROM address\nWHERE address_id IN (\n    SELECT address_id\n    FROM customer\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM address\nWHERE address_id IN (\n    SELECT address_id\n    FROM customer\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway",
            "address2": null,
            "district": " ",
            "city_id": 280,
            "postal_code": "93896",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 12,
            "address": "478 Joliet Way",
            "address2": null,
            "district": " ",
            "city_id": 200,
            "postal_code": "77948",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 13,
            "address": "613 Korolev Drive",
            "address2": null,
            "district": " ",
            "city_id": 329,
            "postal_code": "45844",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 14,
            "address": "1531 Sal Drive",
            "address2": null,
            "district": " ",
            "city_id": 162,
            "postal_code": "53628",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH address USING INDEX sqlite_autoindex_address_1 (address_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN customer USING COVERING INDEX idx_customer_fk_address_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with address and customer",
      "expected_query": "SELECT *\nFROM address t1\nWHERE EXISTS (\n    SELECT 1\n    FROM customer t2\n    WHERE t2.address_id = t1.address_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM address t1\nWHERE EXISTS (\n    SELECT 1\n    FROM customer t2\n    WHERE t2.address_id = t1.address_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "address_id",
          "address",
          "address2",
          "district",
          "city_id",
          "postal_code",
          "phone",
          "last_update"
        ],
        "result_sample": [
          {
            "address_id": 5,
            "address": "1913 Hanoi Way",
            "address2": null,
            "district": " ",
            "city_id": 463,
            "postal_code": "35200",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 6,
            "address": "1121 Loja Avenue",
            "address2": null,
            "district": " ",
            "city_id": 449,
            "postal_code": "17886",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 7,
            "address": "692 Joliet Street",
            "address2": null,
            "district": " ",
            "city_id": 38,
            "postal_code": "83579",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 8,
            "address": "1566 Inegl Manor",
            "address2": null,
            "district": " ",
            "city_id": 349,
            "postal_code": "53561",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 9,
            "address": "53 Idfu Parkway",
            "address2": null,
            "district": " ",
            "city_id": 361,
            "postal_code": "42399",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 10,
            "address": "1795 Santiago de Compostela Way",
            "address2": null,
            "district": " ",
            "city_id": 295,
            "postal_code": "18743",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 11,
            "address": "900 Santiago de Compostela Parkway",
            "address2": null,
            "district": " ",
            "city_id": 280,
            "postal_code": "93896",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 12,
            "address": "478 Joliet Way",
            "address2": null,
            "district": " ",
            "city_id": 200,
            "postal_code": "77948",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 13,
            "address": "613 Korolev Drive",
            "address2": null,
            "district": " ",
            "city_id": 329,
            "postal_code": "45844",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          },
          {
            "address_id": 14,
            "address": "1531 Sal Drive",
            "address2": null,
            "district": " ",
            "city_id": 162,
            "postal_code": "53628",
            "phone": " ",
            "last_update": "2020-12-23 07:12:21"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_customer_fk_address_id (address_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from category",
      "expected_query": "SELECT *\nFROM category\nWHERE category_id IN (\n    SELECT category_id\n    FROM film_category\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM category\nWHERE category_id IN (\n    SELECT category_id\n    FROM film_category\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "category_id": 1,
            "name": "Action",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 2,
            "name": "Animation",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH category USING INDEX sqlite_autoindex_category_1 (category_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN film_category USING COVERING INDEX idx_fk_film_category_category'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with category and film_category",
      "expected_query": "SELECT *\nFROM category t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_category t2\n    WHERE t2.category_id = t1.category_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM category t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_category t2\n    WHERE t2.category_id = t1.category_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "category_id",
          "name",
          "last_update"
        ],
        "result_sample": [
          {
            "category_id": 1,
            "name": "Action",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 2,
            "name": "Animation",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 3,
            "name": "Children",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 4,
            "name": "Classics",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 5,
            "name": "Comedy",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 6,
            "name": "Documentary",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 7,
            "name": "Drama",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 8,
            "name": "Family",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 9,
            "name": "Foreign",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "category_id": 10,
            "name": "Games",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_film_category_category (category_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from city",
      "expected_query": "SELECT *\nFROM city\nWHERE city_id IN (\n    SELECT city_id\n    FROM address\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM city\nWHERE city_id IN (\n    SELECT city_id\n    FROM address\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 2,
            "city": "Abha",
            "country_id": 82,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 3,
            "city": "Abu Dhabi",
            "country_id": 101,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 4,
            "city": "Acua",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 5,
            "city": "Adana",
            "country_id": 97,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 6,
            "city": "Addis Abeba",
            "country_id": 31,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 7,
            "city": "Aden",
            "country_id": 107,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 8,
            "city": "Adoni",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 9,
            "city": "Ahmadnagar",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 10,
            "city": "Akishima",
            "country_id": 50,
            "last_update": "2020-12-23 07:12:14"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH city USING INDEX sqlite_autoindex_city_1 (city_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN address USING COVERING INDEX idx_fk_city_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with city and address",
      "expected_query": "SELECT *\nFROM city t1\nWHERE EXISTS (\n    SELECT 1\n    FROM address t2\n    WHERE t2.city_id = t1.city_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM city t1\nWHERE EXISTS (\n    SELECT 1\n    FROM address t2\n    WHERE t2.city_id = t1.city_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "city_id",
          "city",
          "country_id",
          "last_update"
        ],
        "result_sample": [
          {
            "city_id": 1,
            "city": "A Corua (La Corua)",
            "country_id": 87,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 2,
            "city": "Abha",
            "country_id": 82,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 3,
            "city": "Abu Dhabi",
            "country_id": 101,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 4,
            "city": "Acua",
            "country_id": 60,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 5,
            "city": "Adana",
            "country_id": 97,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 6,
            "city": "Addis Abeba",
            "country_id": 31,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 7,
            "city": "Aden",
            "country_id": 107,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 8,
            "city": "Adoni",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 9,
            "city": "Ahmadnagar",
            "country_id": 44,
            "last_update": "2020-12-23 07:12:14"
          },
          {
            "city_id": 10,
            "city": "Akishima",
            "country_id": 50,
            "last_update": "2020-12-23 07:12:14"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_city_id (city_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from country",
      "expected_query": "SELECT *\nFROM country\nWHERE country_id IN (\n    SELECT country_id\n    FROM city\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM country\nWHERE country_id IN (\n    SELECT country_id\n    FROM city\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "country_id": 1,
            "country": "Afghanistan",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 2,
            "country": "Algeria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 3,
            "country": "American Samoa",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 4,
            "country": "Angola",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 5,
            "country": "Anguilla",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 6,
            "country": "Argentina",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 7,
            "country": "Armenia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 8,
            "country": "Australia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 9,
            "country": "Austria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 10,
            "country": "Azerbaijan",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH country USING INDEX sqlite_autoindex_country_1 (country_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN city USING COVERING INDEX idx_fk_country_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with country and city",
      "expected_query": "SELECT *\nFROM country t1\nWHERE EXISTS (\n    SELECT 1\n    FROM city t2\n    WHERE t2.country_id = t1.country_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM country t1\nWHERE EXISTS (\n    SELECT 1\n    FROM city t2\n    WHERE t2.country_id = t1.country_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "country_id",
          "country",
          "last_update"
        ],
        "result_sample": [
          {
            "country_id": 1,
            "country": "Afghanistan",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 2,
            "country": "Algeria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 3,
            "country": "American Samoa",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 4,
            "country": "Angola",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 5,
            "country": "Anguilla",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 6,
            "country": "Argentina",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 7,
            "country": "Armenia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 8,
            "country": "Australia",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 9,
            "country": "Austria",
            "last_update": "2020-12-23 07:12:12"
          },
          {
            "country_id": 10,
            "country": "Azerbaijan",
            "last_update": "2020-12-23 07:12:12"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_country_id (country_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from customer",
      "expected_query": "SELECT *\nFROM customer\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM customer\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 4,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH customer USING INDEX sqlite_autoindex_customer_1 (customer_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN payment USING COVERING INDEX idx_fk_customer_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with customer and payment",
      "expected_query": "SELECT *\nFROM customer t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.customer_id = t1.customer_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM customer t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.customer_id = t1.customer_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "customer_id",
          "store_id",
          "first_name",
          "last_name",
          "email",
          "address_id",
          "active",
          "create_date",
          "last_update"
        ],
        "result_sample": [
          {
            "customer_id": 1,
            "store_id": 1,
            "first_name": "MARY",
            "last_name": "SMITH",
            "email": "MARY.SMITH@sakilacustomer.org",
            "address_id": 5,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 2,
            "store_id": 1,
            "first_name": "PATRICIA",
            "last_name": "JOHNSON",
            "email": "PATRICIA.JOHNSON@sakilacustomer.org",
            "address_id": 6,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 3,
            "store_id": 1,
            "first_name": "LINDA",
            "last_name": "WILLIAMS",
            "email": "LINDA.WILLIAMS@sakilacustomer.org",
            "address_id": 7,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 4,
            "store_id": 2,
            "first_name": "BARBARA",
            "last_name": "JONES",
            "email": "BARBARA.JONES@sakilacustomer.org",
            "address_id": 8,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 5,
            "store_id": 1,
            "first_name": "ELIZABETH",
            "last_name": "BROWN",
            "email": "ELIZABETH.BROWN@sakilacustomer.org",
            "address_id": 9,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 6,
            "store_id": 2,
            "first_name": "JENNIFER",
            "last_name": "DAVIS",
            "email": "JENNIFER.DAVIS@sakilacustomer.org",
            "address_id": 10,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 7,
            "store_id": 1,
            "first_name": "MARIA",
            "last_name": "MILLER",
            "email": "MARIA.MILLER@sakilacustomer.org",
            "address_id": 11,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 8,
            "store_id": 2,
            "first_name": "SUSAN",
            "last_name": "WILSON",
            "email": "SUSAN.WILSON@sakilacustomer.org",
            "address_id": 12,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 9,
            "store_id": 2,
            "first_name": "MARGARET",
            "last_name": "MOORE",
            "email": "MARGARET.MOORE@sakilacustomer.org",
            "address_id": 13,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          },
          {
            "customer_id": 10,
            "store_id": 1,
            "first_name": "DOROTHY",
            "last_name": "TAYLOR",
            "email": "DOROTHY.TAYLOR@sakilacustomer.org",
            "address_id": 14,
            "active": "1",
            "create_date": "2006-02-14 22:04:36.000",
            "last_update": "2020-12-23 07:15:11"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_customer_id (customer_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from film",
      "expected_query": "SELECT *\nFROM film\nWHERE film_id IN (\n    SELECT film_id\n    FROM film_actor\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM film\nWHERE film_id IN (\n    SELECT film_id\n    FROM film_actor\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH film USING INDEX sqlite_autoindex_film_1 (film_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN film_actor USING COVERING INDEX idx_fk_film_actor_film'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with film and film_actor",
      "expected_query": "SELECT *\nFROM film t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_actor t2\n    WHERE t2.film_id = t1.film_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM film t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film_actor t2\n    WHERE t2.film_id = t1.film_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "film_id",
          "title",
          "description",
          "release_year",
          "language_id",
          "original_language_id",
          "rental_duration",
          "rental_rate",
          "length",
          "replacement_cost",
          "rating",
          "special_features",
          "last_update"
        ],
        "result_sample": [
          {
            "film_id": 1,
            "title": "ACADEMY DINOSAUR",
            "description": "A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 0.99,
            "length": 86,
            "replacement_cost": 20.99,
            "rating": "PG",
            "special_features": "Deleted Scenes,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 2,
            "title": "ACE GOLDFINGER",
            "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 4.99,
            "length": 48,
            "replacement_cost": 12.99,
            "rating": "G",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 3,
            "title": "ADAPTATION HOLES",
            "description": "A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 7,
            "rental_rate": 2.99,
            "length": 50,
            "replacement_cost": 18.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 4,
            "title": "AFFAIR PREJUDICE",
            "description": "A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 5,
            "rental_rate": 2.99,
            "length": 117,
            "replacement_cost": 26.99,
            "rating": "G",
            "special_features": "Commentaries,Behind the Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 5,
            "title": "AFRICAN EGG",
            "description": "A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 2.99,
            "length": 130,
            "replacement_cost": 22.99,
            "rating": "G",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 6,
            "title": "AGENT TRUMAN",
            "description": "A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 169,
            "replacement_cost": 17.99,
            "rating": "PG",
            "special_features": "Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 7,
            "title": "AIRPLANE SIERRA",
            "description": "A Touching Saga of a Hunter And a Butler who must Discover a Butler in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 62,
            "replacement_cost": 28.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 8,
            "title": "AIRPORT POLLOCK",
            "description": "A Epic Tale of a Moose And a Girl who must Confront a Monkey in Ancient India",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 54,
            "replacement_cost": 15.99,
            "rating": "R",
            "special_features": "Trailers",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 9,
            "title": "ALABAMA DEVIL",
            "description": "A Thoughtful Panorama of a Database Administrator And a Mad Scientist who must Outgun a Mad Scientist in A Jet Boat",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 3,
            "rental_rate": 2.99,
            "length": 114,
            "replacement_cost": 21.99,
            "rating": "PG-13",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "film_id": 10,
            "title": "ALADDIN CALENDAR",
            "description": "A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China",
            "release_year": "2006",
            "language_id": 1,
            "original_language_id": null,
            "rental_duration": 6,
            "rental_rate": 4.99,
            "length": 63,
            "replacement_cost": 24.99,
            "rating": "NC-17",
            "special_features": "Trailers,Deleted Scenes",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_film_actor_film (film_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from inventory",
      "expected_query": "SELECT *\nFROM inventory\nWHERE inventory_id IN (\n    SELECT inventory_id\n    FROM rental\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM inventory\nWHERE inventory_id IN (\n    SELECT inventory_id\n    FROM rental\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 11,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH inventory USING INDEX sqlite_autoindex_inventory_1 (inventory_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN rental USING COVERING INDEX idx_rental_fk_inventory_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with inventory and rental",
      "expected_query": "SELECT *\nFROM inventory t1\nWHERE EXISTS (\n    SELECT 1\n    FROM rental t2\n    WHERE t2.inventory_id = t1.inventory_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM inventory t1\nWHERE EXISTS (\n    SELECT 1\n    FROM rental t2\n    WHERE t2.inventory_id = t1.inventory_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "inventory_id",
          "film_id",
          "store_id",
          "last_update"
        ],
        "result_sample": [
          {
            "inventory_id": 1,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 2,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 3,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 4,
            "film_id": 1,
            "store_id": 1,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 6,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 7,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 8,
            "film_id": 1,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 9,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 10,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          },
          {
            "inventory_id": 11,
            "film_id": 2,
            "store_id": 2,
            "last_update": "2020-12-23 07:12:45"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_rental_fk_inventory_id (inventory_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from language",
      "expected_query": "SELECT *\nFROM language\nWHERE language_id IN (\n    SELECT original_language_id\n    FROM film\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM language\nWHERE language_id IN (\n    SELECT original_language_id\n    FROM film\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH language USING INDEX sqlite_autoindex_language_1 (language_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN film USING COVERING INDEX idx_fk_original_language_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with language and film",
      "expected_query": "SELECT *\nFROM language t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film t2\n    WHERE t2.original_language_id = t1.language_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM language t1\nWHERE EXISTS (\n    SELECT 1\n    FROM film t2\n    WHERE t2.original_language_id = t1.language_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [
          "language_id",
          "name",
          "last_update"
        ],
        "result_sample": [],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_original_language_id (original_language_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from rental",
      "expected_query": "SELECT *\nFROM rental\nWHERE rental_id IN (\n    SELECT rental_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM rental\nWHERE rental_id IN (\n    SELECT rental_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 1.0006427764892578,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 76,
            "rental_date": "2005-05-25 11:30:37.000",
            "inventory_id": 3021,
            "customer_id": 1,
            "return_date": "2005-06-03 12:00:37.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:21"
          },
          {
            "rental_id": 320,
            "rental_date": "2005-05-27 00:09:24.000",
            "inventory_id": 1090,
            "customer_id": 2,
            "return_date": "2005-05-28 04:30:24.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:24"
          },
          {
            "rental_id": 435,
            "rental_date": "2005-05-27 17:17:09.000",
            "inventory_id": 3328,
            "customer_id": 3,
            "return_date": "2005-06-02 11:20:09.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:25"
          },
          {
            "rental_id": 573,
            "rental_date": "2005-05-28 10:35:23.000",
            "inventory_id": 4020,
            "customer_id": 1,
            "return_date": "2005-06-03 06:32:23.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:27"
          },
          {
            "rental_id": 830,
            "rental_date": "2005-05-29 22:43:55.000",
            "inventory_id": 3464,
            "customer_id": 3,
            "return_date": "2005-06-01 17:43:55.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:31"
          },
          {
            "rental_id": 1185,
            "rental_date": "2005-06-15 00:54:12.000",
            "inventory_id": 2785,
            "customer_id": 1,
            "return_date": "2005-06-23 02:42:12.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:35"
          },
          {
            "rental_id": 1297,
            "rental_date": "2005-06-15 09:31:28.000",
            "inventory_id": 1075,
            "customer_id": 4,
            "return_date": "2005-06-19 04:33:28.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:37"
          },
          {
            "rental_id": 1422,
            "rental_date": "2005-06-15 18:02:53.000",
            "inventory_id": 1021,
            "customer_id": 1,
            "return_date": "2005-06-19 15:54:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:39"
          },
          {
            "rental_id": 1476,
            "rental_date": "2005-06-15 21:08:46.000",
            "inventory_id": 1407,
            "customer_id": 1,
            "return_date": "2005-06-25 02:26:46.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:39"
          },
          {
            "rental_id": 1546,
            "rental_date": "2005-06-16 01:34:05.000",
            "inventory_id": 3913,
            "customer_id": 3,
            "return_date": "2005-06-24 04:27:05.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:40"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH rental USING INDEX sqlite_autoindex_rental_1 (rental_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN payment'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with rental and payment",
      "expected_query": "SELECT *\nFROM rental t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.rental_id = t1.rental_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM rental t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.rental_id = t1.rental_id\n)\nLIMIT 10;",
        "execution_time_ms": 3.564596176147461,
        "row_count": 10,
        "column_names": [
          "rental_id",
          "rental_date",
          "inventory_id",
          "customer_id",
          "return_date",
          "staff_id",
          "last_update"
        ],
        "result_sample": [
          {
            "rental_id": 1,
            "rental_date": "2005-05-24 22:53:30.000",
            "inventory_id": 367,
            "customer_id": 130,
            "return_date": "2005-05-26 22:04:30.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 2,
            "rental_date": "2005-05-24 22:54:33.000",
            "inventory_id": 1525,
            "customer_id": 459,
            "return_date": "2005-05-28 19:40:33.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 3,
            "rental_date": "2005-05-24 23:03:39.000",
            "inventory_id": 1711,
            "customer_id": 408,
            "return_date": "2005-06-01 22:12:39.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 4,
            "rental_date": "2005-05-24 23:04:41.000",
            "inventory_id": 2452,
            "customer_id": 333,
            "return_date": "2005-06-03 01:43:41.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 5,
            "rental_date": "2005-05-24 23:05:21.000",
            "inventory_id": 2079,
            "customer_id": 222,
            "return_date": "2005-06-02 04:33:21.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 6,
            "rental_date": "2005-05-24 23:08:07.000",
            "inventory_id": 2792,
            "customer_id": 549,
            "return_date": "2005-05-27 01:32:07.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 7,
            "rental_date": "2005-05-24 23:11:53.000",
            "inventory_id": 3995,
            "customer_id": 269,
            "return_date": "2005-05-29 20:34:53.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 8,
            "rental_date": "2005-05-24 23:31:46.000",
            "inventory_id": 2346,
            "customer_id": 239,
            "return_date": "2005-05-27 23:33:46.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 9,
            "rental_date": "2005-05-25 00:00:40.000",
            "inventory_id": 2580,
            "customer_id": 126,
            "return_date": "2005-05-28 00:22:40.000",
            "staff_id": 1,
            "last_update": "2020-12-23 07:15:20"
          },
          {
            "rental_id": 10,
            "rental_date": "2005-05-25 00:02:21.000",
            "inventory_id": 1824,
            "customer_id": 399,
            "return_date": "2005-05-31 22:44:21.000",
            "staff_id": 2,
            "last_update": "2020-12-23 07:15:20"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SCAN t2'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from staff",
      "expected_query": "SELECT *\nFROM staff\nWHERE staff_id IN (\n    SELECT staff_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM staff\nWHERE staff_id IN (\n    SELECT staff_id\n    FROM payment\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH staff USING INDEX sqlite_autoindex_staff_1 (staff_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN payment USING COVERING INDEX idx_fk_staff_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with staff and payment",
      "expected_query": "SELECT *\nFROM staff t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.staff_id = t1.staff_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM staff t1\nWHERE EXISTS (\n    SELECT 1\n    FROM payment t2\n    WHERE t2.staff_id = t1.staff_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "staff_id",
          "first_name",
          "last_name",
          "address_id",
          "picture",
          "email",
          "store_id",
          "active",
          "username",
          "password",
          "last_update"
        ],
        "result_sample": [
          {
            "staff_id": 1,
            "first_name": "Mike",
            "last_name": "Hillyer",
            "address_id": 3,
            "picture": null,
            "email": "Mike.Hillyer@sakilastaff.com",
            "store_id": 1,
            "active": 1,
            "username": "Mike",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "staff_id": 2,
            "first_name": "Jon",
            "last_name": "Stephens",
            "address_id": 4,
            "picture": null,
            "email": "Jon.Stephens@sakilastaff.com",
            "store_id": 2,
            "active": 1,
            "username": "Jon",
            "password": "8cb2237d0679ca88db6464eac60da96345513964",
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_fk_staff_id (staff_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Subquery filtering records from store",
      "expected_query": "SELECT *\nFROM store\nWHERE store_id IN (\n    SELECT store_id\n    FROM customer\n    LIMIT 100\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM store\nWHERE store_id IN (\n    SELECT store_id\n    FROM customer\n    LIMIT 100\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 1,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SEARCH store USING INDEX sqlite_autoindex_store_1 (store_id=?)'}\n{'id': 8, 'parent': 0, 'notused': 0, 'detail': 'LIST SUBQUERY 1'}\n{'id': 11, 'parent': 8, 'notused': 0, 'detail': 'SCAN customer USING COVERING INDEX idx_customer_fk_store_id'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "EXISTS subquery with store and customer",
      "expected_query": "SELECT *\nFROM store t1\nWHERE EXISTS (\n    SELECT 1\n    FROM customer t2\n    WHERE t2.store_id = t1.store_id\n)\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT *\nFROM store t1\nWHERE EXISTS (\n    SELECT 1\n    FROM customer t2\n    WHERE t2.store_id = t1.store_id\n)\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 2,
        "column_names": [
          "store_id",
          "manager_staff_id",
          "address_id",
          "last_update"
        ],
        "result_sample": [
          {
            "store_id": 1,
            "manager_staff_id": 1,
            "address_id": 1,
            "last_update": "2020-12-23 07:12:31"
          },
          {
            "store_id": 2,
            "manager_staff_id": 2,
            "address_id": 2,
            "last_update": "2020-12-23 07:12:31"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 3, 'parent': 0, 'notused': 0, 'detail': 'SCAN t1'}\n{'id': 6, 'parent': 0, 'notused': 0, 'detail': 'CORRELATED SCALAR SUBQUERY 1'}\n{'id': 10, 'parent': 6, 'notused': 0, 'detail': 'SEARCH t2 USING COVERING INDEX idx_customer_fk_store_id (store_id=?)'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "Common Table Expression (CTE) on actor",
      "expected_query": "WITH actor_cte AS (\n    SELECT actor_id, first_name\n    FROM actor\n    WHERE actor_id IS NOT NULL\n)\nSELECT *\nFROM actor_cte\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "WITH actor_cte AS (\n    SELECT actor_id, first_name\n    FROM actor\n    WHERE actor_id IS NOT NULL\n)\nSELECT *\nFROM actor_cte\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "actor_id",
          "first_name"
        ],
        "result_sample": [
          {
            "actor_id": 1,
            "first_name": "PENELOPE"
          },
          {
            "actor_id": 2,
            "first_name": "NICK"
          },
          {
            "actor_id": 3,
            "first_name": "ED"
          },
          {
            "actor_id": 4,
            "first_name": "JENNIFER"
          },
          {
            "actor_id": 5,
            "first_name": "JOHNNY"
          },
          {
            "actor_id": 6,
            "first_name": "BETTE"
          },
          {
            "actor_id": 7,
            "first_name": "GRACE"
          },
          {
            "actor_id": 8,
            "first_name": "MATTHEW"
          },
          {
            "actor_id": 9,
            "first_name": "JOE"
          },
          {
            "actor_id": 10,
            "first_name": "CHRISTIAN"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 4, 'parent': 0, 'notused': 0, 'detail': 'SCAN actor'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    },
    {
      "natural_language": "UNION query combining results from actor and address",
      "expected_query": "SELECT 'actor' AS source, last_update AS value\nFROM actor\nWHERE last_update IS NOT NULL\n\nUNION\n\nSELECT 'address' AS source, last_update AS value\nFROM address\nWHERE last_update IS NOT NULL\nLIMIT 10;",
      "actual_query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
      "match_type": "none",
      "expected_result": {
        "query": "SELECT 'actor' AS source, last_update AS value\nFROM actor\nWHERE last_update IS NOT NULL\n\nUNION\n\nSELECT 'address' AS source, last_update AS value\nFROM address\nWHERE last_update IS NOT NULL\nLIMIT 10;",
        "execution_time_ms": 0.0,
        "row_count": 10,
        "column_names": [
          "source",
          "value"
        ],
        "result_sample": [
          {
            "source": "actor",
            "value": "2020-12-23 07:12:29"
          },
          {
            "source": "actor",
            "value": "2020-12-23 07:12:30"
          },
          {
            "source": "actor",
            "value": "2020-12-23 07:12:31"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:21"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:22"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:23"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:24"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:25"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:26"
          },
          {
            "source": "address",
            "value": "2020-12-23 07:12:27"
          }
        ],
        "error": null,
        "execution_plan": "{'id': 1, 'parent': 0, 'notused': 0, 'detail': 'COMPOUND QUERY'}\n{'id': 2, 'parent': 1, 'notused': 0, 'detail': 'LEFT-MOST SUBQUERY'}\n{'id': 6, 'parent': 2, 'notused': 0, 'detail': 'SCAN actor'}\n{'id': 13, 'parent': 1, 'notused': 0, 'detail': 'UNION USING TEMP B-TREE'}\n{'id': 16, 'parent': 13, 'notused': 0, 'detail': 'SCAN address'}"
      },
      "actual_result": {
        "query": "ERROR: Anthropic.__init__() takes 1 positional argument but 2 were given",
        "execution_time_ms": 0.0,
        "row_count": 0,
        "column_names": [],
        "result_sample": [],
        "error": "near \"ERROR\": syntax error",
        "execution_plan": "Error getting execution plan: near \"ERROR\": syntax error"
      },
      "error_category": "syntax",
      "error_details": "near \"ERROR\": syntax error",
      "complexity_tier": "advanced"
    }
  ],
  "execution_time_ms": 197.4771022796631
}