import os
import sys
import traceback
from datetime import datetime

from .models import Database
from .sql_explorer import SQLExplorer

def run_metadata_workflow(database=None, output=None, sample_rows=3, max_values=10, execute_queries=True, query_result_limit=5):
    """
    Run the metadata extraction workflow using the SQLExplorer class.
    This is a convenience function maintained for backwards compatibility.
    """
    if database is None:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        database = os.path.join(script_dir, "..", "Datasets", "dvd.db") 
    
    if output is None:
        base_name = os.path.splitext(os.path.basename(database))[0]
        output = f"{base_name}_metadata.json"
    
    explorer = SQLExplorer(database)
    db = explorer.extract_metadata(
        sample_rows=sample_rows, 
        max_column_values=max_values,
        execute_queries=execute_queries,
        query_result_limit=query_result_limit
    )
    
    db.save_to_file(output)
    return db

# For backwards compatibility
def extract_sqlite_metadata(db_path, sample_rows=3, max_column_values=10, execute_queries=True, query_result_limit=5):
    """Legacy function that uses the new SQLExplorer class internally"""
    explorer = SQLExplorer(db_path)
    db = explorer.extract_metadata(
        sample_rows=sample_rows,
        max_column_values=max_column_values,
        execute_queries=execute_queries,
        query_result_limit=query_result_limit
    )
    return db.to_dict()

# For backwards compatibility
def save_metadata_to_file(metadata, output_path):
    """Legacy function to save dictionary metadata to a file"""
    db = Database(
        name=metadata["database_info"]["name"],
        path=metadata["database_info"]["path"],
        size_bytes=metadata["database_info"]["size_bytes"],
        extraction_time=metadata["database_info"]["extraction_time"]
    )
    db.save_to_file(output_path)

# For command-line usage, import and run the main function from cli.py
def main():
    from .cli import main as cli_main
    cli_main()

if __name__ == "__main__":
    main()